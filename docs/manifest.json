{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json", "dbt_version": "0.21.1", "generated_at": "2022-03-22T22:49:32.345961Z", "invocation_id": "8ccc9f73-4570-4d02-a73a-f2045e582801", "env": {}, "project_id": "a0de1db8b6d266ccdc659191d6e1e38c", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.dlh_xero.V_JOURNAL_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH JOURNAL_HEADER AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('V_XER_JOURNAL_HEADER_STG')}}\n),\nJOURNAL_LINE AS (\n  SELECT\n  *\n  FROM\n    {{ref('V_XER_JOURNAL_LINE_STG')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    JL.K_JOURNAL_LINE_DLHK\n    ,S.K_JOURNAL_DLHK\n    ,JL.K_ACCOUNT_DLHK\n    --BK\n    ,JL.K_JOURNAL_LINE_BK\n    ,S.K_JOURNAL_BK\n    ,S.K_SOURCE_BK \n    ,JL.K_ACCOUNT_BK    \n    --ATTRIBUTES\n    ,S.A_CREATED_DATE_DTS\n    ,S.A_JOURNAL_DATE\n    ,S.A_REFERENCE\n    ,S.A_SOURCE_TYPE\n    ,S.A_JOURNAL_NUMBER\n    ,JL.A_ACCOUNT_CODE\n    ,JL.A_ACCOUNT_NAME\n    ,JL.A_ACCOUNT_TYPE\n    ,JL.A_DESCRIPTION\n    ,JL.A_TAX_NAME\n    ,JL.A_TAX_TYPE\n    --METRICS\n    ,JL.M_GROSS_AMOUNT\n    ,JL.M_NET_AMOUNT\n    ,JL.M_TAX_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    JOURNAL_HEADER S\n    LEFT JOIN JOURNAL_LINE JL on JL.K_JOURNAL_BK = S.K_JOURNAL_BK\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_JOURNAL_HEADER_STG", "model.dlh_xero.V_JOURNAL_LINE_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "JOURNAL", "V_JOURNAL_STG"], "unique_id": "model.dlh_xero.V_JOURNAL_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/JOURNAL/V_JOURNAL_STG.sql", "original_file_path": "models/staging/JOURNAL/V_JOURNAL_STG.sql", "name": "V_JOURNAL_STG", "alias": "V_JOURNAL_STG", "checksum": {"name": "sha256", "checksum": "0908a94f814cbebb915651f32a497cf9e179e96ce474889549c5a24b08a27d65"}, "tags": ["staging", "daily"], "refs": [["V_JOURNAL_HEADER_STG"], ["V_JOURNAL_LINE_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/JOURNAL/V_JOURNAL_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH JOURNAL_HEADER AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.V_JOURNAL_HEADER_STG\n),\nJOURNAL_LINE AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DBT_XERO.V_JOURNAL_LINE_STG\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    JL.K_JOURNAL_LINE_DLHK\n    ,S.K_JOURNAL_DLHK\n    ,JL.K_ACCOUNT_DLHK\n    --BK\n    ,JL.K_JOURNAL_LINE_BK\n    ,S.K_JOURNAL_BK\n    ,S.K_SOURCE_BK \n    ,JL.K_ACCOUNT_BK    \n    --ATTRIBUTES\n    ,S.A_CREATED_DATE_DTS\n    ,S.A_JOURNAL_DATE\n    ,S.A_REFERENCE\n    ,S.A_SOURCE_TYPE\n    ,S.A_JOURNAL_NUMBER\n    ,JL.A_ACCOUNT_CODE\n    ,JL.A_ACCOUNT_NAME\n    ,JL.A_ACCOUNT_TYPE\n    ,JL.A_DESCRIPTION\n    ,JL.A_TAX_NAME\n    ,JL.A_TAX_TYPE\n    --METRICS\n    ,JL.M_GROSS_AMOUNT\n    ,JL.M_NET_AMOUNT\n    ,JL.M_TAX_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    JOURNAL_HEADER S\n    LEFT JOIN JOURNAL_LINE JL on JL.K_JOURNAL_BK = S.K_JOURNAL_BK\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_JOURNAL_STG"}, "model.dlh_xero.V_JOURNAL_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'JOURNAL')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.JOURNAL_ID,'00000000000000000000000000000000')) ) AS K_JOURNAL_DLHK\n    --BUSINESS KEYS\n    ,JOURNAL_ID AS K_JOURNAL_BK\n    ,SOURCE_ID AS K_SOURCE_BK    \n    --ATTRIBUTES\n    ,CREATED_DATE_UTC AS A_CREATED_DATE_DTS\n    ,JOURNAL_DATE AS A_JOURNAL_DATE\n    ,REFERENCE AS A_REFERENCE\n    ,SOURCE_TYPE AS A_SOURCE_TYPE\n\n    ,JOURNAL_NUMBER AS A_JOURNAL_NUMBER\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source S\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.JOURNAL"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "JOURNAL", "V_JOURNAL_HEADER_STG"], "unique_id": "model.dlh_xero.V_JOURNAL_HEADER_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/JOURNAL/V_JOURNAL_HEADER_STG.sql", "original_file_path": "models/staging/JOURNAL/V_JOURNAL_HEADER_STG.sql", "name": "V_JOURNAL_HEADER_STG", "alias": "V_JOURNAL_HEADER_STG", "checksum": {"name": "sha256", "checksum": "c9de05a4416a1869e673c826190cd56f6b169a2283aae8bbf9d17168674c28a8"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_XERO", "JOURNAL"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/JOURNAL/V_JOURNAL_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"JOURNAL\"\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.JOURNAL_ID,'00000000000000000000000000000000')) ) AS K_JOURNAL_DLHK\n    --BUSINESS KEYS\n    ,JOURNAL_ID AS K_JOURNAL_BK\n    ,SOURCE_ID AS K_SOURCE_BK    \n    --ATTRIBUTES\n    ,CREATED_DATE_UTC AS A_CREATED_DATE_DTS\n    ,JOURNAL_DATE AS A_JOURNAL_DATE\n    ,REFERENCE AS A_REFERENCE\n    ,SOURCE_TYPE AS A_SOURCE_TYPE\n\n    ,JOURNAL_NUMBER AS A_JOURNAL_NUMBER\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    source S\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_JOURNAL_HEADER_STG"}, "model.dlh_xero.V_JOURNAL_LINE_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'JOURNAL_LINE')}}\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_XER_ACCOUNTS_D')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.JOURNAL_LINE_ID,'00000000000000000000000000000000')) ) AS K_JOURNAL_LINE_DLHK\n    ,MD5( TRIM(COALESCE(S.JOURNAL_ID,'00000000000000000000000000000000')) ) AS K_JOURNAL_DLHK\n    ,A.K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,S.ACCOUNT_ID AS K_ACCOUNT_BK\n    ,S.JOURNAL_ID AS K_JOURNAL_BK\n    ,S.JOURNAL_LINE_ID AS K_JOURNAL_LINE_BK\n    --ATTRIBUTES\n    ,S.ACCOUNT_CODE AS A_ACCOUNT_CODE\n    ,S.ACCOUNT_NAME AS A_ACCOUNT_NAME\n    ,S.ACCOUNT_TYPE AS A_ACCOUNT_TYPE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.TAX_NAME AS A_TAX_NAME\n    ,S.TAX_TYPE AS A_TAX_TYPE\n    --METRICS\n    ,S.GROSS_AMOUNT::DECIMAL(15,2) AS M_GROSS_AMOUNT\n    ,S.NET_AMOUNT::DECIMAL(15,2) AS M_NET_AMOUNT\n    ,S.TAX_AMOUNT::DECIMAL(15,2) AS M_TAX_AMOUNT\n      --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n\nFROM\n    source S\n    LEFT JOIN account A on A.K_ACCOUNT_BK = S.ACCOUNT_ID    \n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.JOURNAL_LINE", "model.dlh_xero.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "JOURNAL", "V_JOURNAL_LINE_STG"], "unique_id": "model.dlh_xero.V_JOURNAL_LINE_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/JOURNAL/V_JOURNAL_LINE_STG.sql", "original_file_path": "models/staging/JOURNAL/V_JOURNAL_LINE_STG.sql", "name": "V_JOURNAL_LINE_STG", "alias": "V_JOURNAL_LINE_STG", "checksum": {"name": "sha256", "checksum": "79e56497012614c92b0c0282039d697815cabd5f41177b07919fae8cd1ef1eb8"}, "tags": ["staging", "daily"], "refs": [["W_ACCOUNTS_D"]], "sources": [["DEMO_XERO", "JOURNAL_LINE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/JOURNAL/V_JOURNAL_LINE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"JOURNAL_LINE\"\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.JOURNAL_LINE_ID,'00000000000000000000000000000000')) ) AS K_JOURNAL_LINE_DLHK\n    ,MD5( TRIM(COALESCE(S.JOURNAL_ID,'00000000000000000000000000000000')) ) AS K_JOURNAL_DLHK\n    ,A.K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,S.ACCOUNT_ID AS K_ACCOUNT_BK\n    ,S.JOURNAL_ID AS K_JOURNAL_BK\n    ,S.JOURNAL_LINE_ID AS K_JOURNAL_LINE_BK\n    --ATTRIBUTES\n    ,S.ACCOUNT_CODE AS A_ACCOUNT_CODE\n    ,S.ACCOUNT_NAME AS A_ACCOUNT_NAME\n    ,S.ACCOUNT_TYPE AS A_ACCOUNT_TYPE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.TAX_NAME AS A_TAX_NAME\n    ,S.TAX_TYPE AS A_TAX_TYPE\n    --METRICS\n    ,S.GROSS_AMOUNT::DECIMAL(15,2) AS M_GROSS_AMOUNT\n    ,S.NET_AMOUNT::DECIMAL(15,2) AS M_NET_AMOUNT\n    ,S.TAX_AMOUNT::DECIMAL(15,2) AS M_TAX_AMOUNT\n      --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\n\nFROM\n    source S\n    LEFT JOIN account A on A.K_ACCOUNT_BK = S.ACCOUNT_ID    \n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_JOURNAL_LINE_STG"}, "model.dlh_xero.V_RECEIPTS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH RECEIPT_HEADER AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('V_XER_RECEIPT_HEADER_STG')}}\n),\nRECEIPT_LINE AS (\n  SELECT\n  *\n  FROM\n    {{ref('V_XER_RECEIPT_ITEM_STG')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    RL.K_RECEIPT_LINE_DLHK\n    ,S.K_RECEIPT_DLHK\n    ,S.K_CONTACT_DLHK\n    ,RL.K_ACCOUNT_DLHK\n    ,RL.K_ITEM_DLHK\n    --BUSINESS KEYS\n    ,S.K_RECEIPT_BK\n    ,S.K_CONTACT_BK\n    ,S.K_EXPENSE_CLAIM_BK\n    ,S.K_USER_BK\n    ,RL.K_ACCOUNT_BK\n    ,RL.K_ITEM_BK\n    --ATTRIBUTES\n    ,RL.A_RECEIPT_LINE\n    ,RL.A_DESCRIPTION AS A_RECEIPT_LINE_DESCRIPTION\n    ,RL.A_TAX_TYPE AS A_RECEIPT_LINE_TAX_TYPE\n    ,S.A_LINE_AMOUNT_TYPES\n    ,S.A_REFERENCE\n    ,S.A_RECEIPT_DATE\n    ,S.A_STATUS\n    ,S.A_UPDATED_DATE_DTS\n    ,S.A_URL\n    --BOOLEAN\n    ,S.B_HAS_ATTACHMENTS\n    --METRICS\n    ,RL.M_DISCOUNT_RATE\n    ,RL.M_LINE_AMOUNT\n    ,RL.M_QUANTITY\n    ,RL.M_TAX_AMOUNT\n    ,RL.M_UNIT_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    RECEIPT_HEADER S\n    LEFT JOIN RECEIPT_LINE RL on RL.K_RECEIPT_DLHK = S.K_RECEIPT_DLHK    \n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_RECEIPT_HEADER_STG", "model.dlh_xero.V_RECEIPT_ITEM_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "RECEIPTS", "V_RECEIPTS_STG"], "unique_id": "model.dlh_xero.V_RECEIPTS_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/RECEIPTS/V_RECEIPTS_STG.sql", "original_file_path": "models/staging/RECEIPTS/V_RECEIPTS_STG.sql", "name": "V_RECEIPTS_STG", "alias": "V_RECEIPTS_STG", "checksum": {"name": "sha256", "checksum": "9aa135d18c0e5b4b32d3d1ed7e88ceb1e242c8e7eda08a1c1ab9f71c28836e97"}, "tags": ["staging", "daily"], "refs": [["V_RECEIPT_HEADER_STG"], ["V_RECEIPT_ITEM_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/RECEIPTS/V_RECEIPTS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH RECEIPT_HEADER AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.V_RECEIPT_HEADER_STG\n),\nRECEIPT_LINE AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DBT_XERO.V_RECEIPT_ITEM_STG\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    RL.K_RECEIPT_LINE_DLHK\n    ,S.K_RECEIPT_DLHK\n    ,S.K_CONTACT_DLHK\n    ,RL.K_ACCOUNT_DLHK\n    ,RL.K_ITEM_DLHK\n    --BUSINESS KEYS\n    ,S.K_RECEIPT_BK\n    ,S.K_CONTACT_BK\n    ,S.K_EXPENSE_CLAIM_BK\n    ,S.K_USER_BK\n    ,RL.K_ACCOUNT_BK\n    ,RL.K_ITEM_BK\n    --ATTRIBUTES\n    ,RL.A_RECEIPT_LINE\n    ,RL.A_DESCRIPTION AS A_RECEIPT_LINE_DESCRIPTION\n    ,RL.A_TAX_TYPE AS A_RECEIPT_LINE_TAX_TYPE\n    ,S.A_LINE_AMOUNT_TYPES\n    ,S.A_REFERENCE\n    ,S.A_RECEIPT_DATE\n    ,S.A_STATUS\n    ,S.A_UPDATED_DATE_DTS\n    ,S.A_URL\n    --BOOLEAN\n    ,S.B_HAS_ATTACHMENTS\n    --METRICS\n    ,RL.M_DISCOUNT_RATE\n    ,RL.M_LINE_AMOUNT\n    ,RL.M_QUANTITY\n    ,RL.M_TAX_AMOUNT\n    ,RL.M_UNIT_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    RECEIPT_HEADER S\n    LEFT JOIN RECEIPT_LINE RL on RL.K_RECEIPT_DLHK = S.K_RECEIPT_DLHK    \n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_RECEIPTS_STG"}, "model.dlh_xero.V_RECEIPT_ITEM_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'RECEIPT_LINE_ITEM')}}\n),\ncontact AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_XER_CONTACTS_D')}}\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_XER_ACCOUNTS_D')}}\n),\nitem AS (\n  SELECT \n  * \n  FROM  \t\n     {{ref('W_XER_ITEMS_D')}}\n),\nrename AS (\nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(S.RECEIPT_ID,'-',CAST(S.RECEIPT_LINE AS VARCHAR)),'00000000000000000000000000000000')) ) AS K_RECEIPT_LINE_DLHK\n    ,MD5( TRIM(COALESCE(S.RECEIPT_ID,'00000000000000000000000000000000')) ) AS K_RECEIPT_DLHK\n    ,A.K_ACCOUNT_DLHK\n    ,I.K_ITEM_DLHK\n    --BUSINESS KEYS  \n    ,A.K_ACCOUNT_BK\n    ,I.K_ITEM_BK\n    ,S.RECEIPT_ID AS K_RECEIPT_BK\n    --ATTRIBUTES\n    ,S.RECEIPT_LINE AS A_RECEIPT_LINE\n    ,S.ACCOUNT_CODE AS A_ACCOUNT_CODE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.ITEM_CODE AS A_ITEM_CODE\n    ,S.TAX_TYPE AS A_TAX_TYPE\n    --METRICS\n    ,S.DISCOUNT_RATE::DECIMAL(15,2) AS M_DISCOUNT_RATE\n    ,S.LINE_AMOUNT::DECIMAL(15,2) AS M_LINE_AMOUNT\n    ,S.QUANTITY::DECIMAL(15,2) AS M_QUANTITY\n    ,S.TAX_AMOUNT::DECIMAL(15,2) AS M_TAX_AMOUNT\n    ,S.UNIT_AMOUNT::DECIMAL(15,2) AS M_UNIT_AMOUNT\nFROM \n    source S\n    LEFT JOIN account A on A.A_CODE = S.ACCOUNT_CODE\n    LEFT JOIN item I ON I.A_CODE = S.ITEM_CODE\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.RECEIPT_LINE_ITEM", "model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "RECEIPTS", "V_RECEIPT_ITEM_STG"], "unique_id": "model.dlh_xero.V_RECEIPT_ITEM_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/RECEIPTS/V_RECEIPT_ITEM_STG.sql", "original_file_path": "models/staging/RECEIPTS/V_RECEIPT_ITEM_STG.sql", "name": "V_RECEIPT_ITEM_STG", "alias": "V_RECEIPT_ITEM_STG", "checksum": {"name": "sha256", "checksum": "9fa8e69ebae2dee1128d3bf83d8036fdbbfdf57ca5dc9af13230017b7cd6e2c3"}, "tags": ["staging", "daily"], "refs": [["W_CONTACTS_D"], ["W_ACCOUNTS_D"], ["W_ITEMS_D"]], "sources": [["DEMO_XERO", "RECEIPT_LINE_ITEM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/RECEIPTS/V_RECEIPT_ITEM_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"RECEIPT_LINE_ITEM\"\n),\ncontact AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n),\nitem AS (\n  SELECT \n  * \n  FROM  \t\n     DEVELOPER_SANDBOX.DBT_XERO.W_ITEMS_D\n),\nrename AS (\nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(CONCAT(S.RECEIPT_ID,'-',CAST(S.RECEIPT_LINE AS VARCHAR)),'00000000000000000000000000000000')) ) AS K_RECEIPT_LINE_DLHK\n    ,MD5( TRIM(COALESCE(S.RECEIPT_ID,'00000000000000000000000000000000')) ) AS K_RECEIPT_DLHK\n    ,A.K_ACCOUNT_DLHK\n    ,I.K_ITEM_DLHK\n    --BUSINESS KEYS  \n    ,A.K_ACCOUNT_BK\n    ,I.K_ITEM_BK\n    ,S.RECEIPT_ID AS K_RECEIPT_BK\n    --ATTRIBUTES\n    ,S.RECEIPT_LINE AS A_RECEIPT_LINE\n    ,S.ACCOUNT_CODE AS A_ACCOUNT_CODE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.ITEM_CODE AS A_ITEM_CODE\n    ,S.TAX_TYPE AS A_TAX_TYPE\n    --METRICS\n    ,S.DISCOUNT_RATE::DECIMAL(15,2) AS M_DISCOUNT_RATE\n    ,S.LINE_AMOUNT::DECIMAL(15,2) AS M_LINE_AMOUNT\n    ,S.QUANTITY::DECIMAL(15,2) AS M_QUANTITY\n    ,S.TAX_AMOUNT::DECIMAL(15,2) AS M_TAX_AMOUNT\n    ,S.UNIT_AMOUNT::DECIMAL(15,2) AS M_UNIT_AMOUNT\nFROM \n    source S\n    LEFT JOIN account A on A.A_CODE = S.ACCOUNT_CODE\n    LEFT JOIN item I ON I.A_CODE = S.ITEM_CODE\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_RECEIPT_ITEM_STG"}, "model.dlh_xero.V_RECEIPT_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'RECEIPT')}}\n),\ncontact AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_XER_CONTACTS_D')}}\n),\nrename AS (\nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.RECEIPT_ID,'00000000000000000000000000000000')) ) AS K_RECEIPT_DLHK\n    ,C.K_CONTACT_DLHK\n    --BUSINESS KEYS\n    ,S.CONTACT_ID AS K_CONTACT_BK\n    ,S.EXPENSE_CLAIM_ID AS K_EXPENSE_CLAIM_BK\n    ,S.RECEIPT_ID AS K_RECEIPT_BK\n    ,S.USER_ID AS K_USER_BK\n    --ATTRIBUTES\n    ,S.LINE_AMOUNT_TYPES AS A_LINE_AMOUNT_TYPES\n    ,S.REFERENCE AS A_REFERENCE\n    ,S.R_DATE AS A_RECEIPT_DATE\n    ,S.STATUS AS A_STATUS\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_DATE_DTS\n    ,S.URL AS A_URL\n    --BOOLEAN\n    ,HAS_ATTACHMENTS AS B_HAS_ATTACHMENTS\n    --METRICS\n    ,S.RECEIPT_NUMBER::DECIMAL(15,2) AS M_RECEIPT_NUMBER\n    ,S.SUB_TOTAL::DECIMAL(15,2) AS M_SUB_TOTAL\n    ,S.TOTAL::DECIMAL(15,2) AS M_TOTAL\n    ,S.TOTAL_TAX::DECIMAL(15,2) AS M_TOTAL_TAX\n\nFROM \n    source S\n    LEFT JOIN contact C on C.K_CONTACT_BK = S.CONTACT_ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.RECEIPT", "model.dlh_xero.W_CONTACTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "RECEIPTS", "V_RECEIPT_HEADER_STG"], "unique_id": "model.dlh_xero.V_RECEIPT_HEADER_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/RECEIPTS/V_RECEIPT_HEADER_STG.sql", "original_file_path": "models/staging/RECEIPTS/V_RECEIPT_HEADER_STG.sql", "name": "V_RECEIPT_HEADER_STG", "alias": "V_RECEIPT_HEADER_STG", "checksum": {"name": "sha256", "checksum": "9babf3370b59b503e04d4477913d69210a543a923320e62fd01b904a534dad3a"}, "tags": ["staging", "daily"], "refs": [["W_CONTACTS_D"]], "sources": [["DEMO_XERO", "RECEIPT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/RECEIPTS/V_RECEIPT_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"RECEIPT\"\n),\ncontact AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D\n),\nrename AS (\nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.RECEIPT_ID,'00000000000000000000000000000000')) ) AS K_RECEIPT_DLHK\n    ,C.K_CONTACT_DLHK\n    --BUSINESS KEYS\n    ,S.CONTACT_ID AS K_CONTACT_BK\n    ,S.EXPENSE_CLAIM_ID AS K_EXPENSE_CLAIM_BK\n    ,S.RECEIPT_ID AS K_RECEIPT_BK\n    ,S.USER_ID AS K_USER_BK\n    --ATTRIBUTES\n    ,S.LINE_AMOUNT_TYPES AS A_LINE_AMOUNT_TYPES\n    ,S.REFERENCE AS A_REFERENCE\n    ,S.R_DATE AS A_RECEIPT_DATE\n    ,S.STATUS AS A_STATUS\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_DATE_DTS\n    ,S.URL AS A_URL\n    --BOOLEAN\n    ,HAS_ATTACHMENTS AS B_HAS_ATTACHMENTS\n    --METRICS\n    ,S.RECEIPT_NUMBER::DECIMAL(15,2) AS M_RECEIPT_NUMBER\n    ,S.SUB_TOTAL::DECIMAL(15,2) AS M_SUB_TOTAL\n    ,S.TOTAL::DECIMAL(15,2) AS M_TOTAL\n    ,S.TOTAL_TAX::DECIMAL(15,2) AS M_TOTAL_TAX\n\nFROM \n    source S\n    LEFT JOIN contact C on C.K_CONTACT_BK = S.CONTACT_ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_RECEIPT_HEADER_STG"}, "model.dlh_xero.V_PAYMENTS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'PAYMENT')}}\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_XER_ACCOUNTS_D')}}\n),\nrename AS (\nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.PAYMENT_ID,'00000000000000000000000000000000')) ) AS K_PAYMENT_DLHK\n    ,A.K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,S.PAYMENT_ID AS K_PAYMENT_BK\n    ,S.PREPAYMENT_ID AS K_PREPAYMENT_BK\n    ,S.BATCH_PAYMENT_ID AS K_BATCH_PAYMENT_BK\n    ,S.ACCOUNT_ID AS K_ACCOUNT_BK    \n    ,S.CREDIT_NOTE_ID AS K_CREDIT_NOTE_BK\n    ,S.EXPENSE_CLAIM_ID AS K_EXPENSE_CLAIM_BK    \n    ,S.INVOICE_ID AS K_INVOICE_BK\n    ,S.OVERPAYMENT_ID AS K_OVERPAYMENT_BK\n    --ATTRIBUTES\n    ,S.BATCH_PAYMENT_DATE AS A_BATCH_PAYMENT_DATE\n    ,S.BATCH_PAYMENT_STATUS AS A_BATCH_PAYMENT_STATUS\n    ,S.BATCH_PAYMENT_TYPE AS A_BATCH_PAYMENT_TYPE\n    ,S.BATCH_PAYMENT_UPDATED_DATE_UTC AS A_BATCH_PAYMENT_UPDATED_DATE_DTS\n    ,S.PAYMENT_TYPE AS A_PAYMENT_TYPE\n    ,S.PAY_DATE AS A_PAY_DATE\n    ,S.REFERENCE AS A_REFERENCE\n    ,S.STATUS AS A_STATUS\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_DATE_DTS\n    ,S.BATCH_PAYMENT_IS_RECONCILED AS B_BATCH_PAYMENT_IS_RECONCILED    \n    --BOOLEAN\n    ,S.HAS_ACCOUNT::BOOLEAN AS B_HAS_ACCOUNT\n    ,S.IS_RECONCILED::BOOLEAN AS B_IS_RECONCILED\n    ,S.HAS_VALIDATION_ERRORS::BOOLEAN AS B_HAS_VALIDATION_ERRORS\n    --METRICS    \n    ,S.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n    ,S.BANK_AMOUNT::DECIMAL(15,2) AS M_BANK_AMOUNT\n    ,S.BATCH_PAYMENT_TOTAL_AMOUNT::DECIMAL(15,2) AS M_BATCH_PAYMENT_TOTAL_AMOUNT\n    ,S.CURRENCY_RATE::DECIMAL(15,2) AS M_CURRENCY_RATE\n        --METADATA (MD)\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM \n    source S\n    LEFT JOIN account A on A.K_ACCOUNT_BK = S.ACCOUNT_ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.PAYMENT", "model.dlh_xero.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "PAYMENTS", "V_PAYMENTS_STG"], "unique_id": "model.dlh_xero.V_PAYMENTS_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/PAYMENTS/V_PAYMENTS_STG.sql", "original_file_path": "models/staging/PAYMENTS/V_PAYMENTS_STG.sql", "name": "V_PAYMENTS_STG", "alias": "V_PAYMENTS_STG", "checksum": {"name": "sha256", "checksum": "b2eb5805a61d80b420e50a36b954db06cdcd5b361bcc4f0b8dd9eada4d992672"}, "tags": ["staging", "daily"], "refs": [["W_ACCOUNTS_D"]], "sources": [["DEMO_XERO", "PAYMENT"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/PAYMENTS/V_PAYMENTS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"PAYMENT\"\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n),\nrename AS (\nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.PAYMENT_ID,'00000000000000000000000000000000')) ) AS K_PAYMENT_DLHK\n    ,A.K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,S.PAYMENT_ID AS K_PAYMENT_BK\n    ,S.PREPAYMENT_ID AS K_PREPAYMENT_BK\n    ,S.BATCH_PAYMENT_ID AS K_BATCH_PAYMENT_BK\n    ,S.ACCOUNT_ID AS K_ACCOUNT_BK    \n    ,S.CREDIT_NOTE_ID AS K_CREDIT_NOTE_BK\n    ,S.EXPENSE_CLAIM_ID AS K_EXPENSE_CLAIM_BK    \n    ,S.INVOICE_ID AS K_INVOICE_BK\n    ,S.OVERPAYMENT_ID AS K_OVERPAYMENT_BK\n    --ATTRIBUTES\n    ,S.BATCH_PAYMENT_DATE AS A_BATCH_PAYMENT_DATE\n    ,S.BATCH_PAYMENT_STATUS AS A_BATCH_PAYMENT_STATUS\n    ,S.BATCH_PAYMENT_TYPE AS A_BATCH_PAYMENT_TYPE\n    ,S.BATCH_PAYMENT_UPDATED_DATE_UTC AS A_BATCH_PAYMENT_UPDATED_DATE_DTS\n    ,S.PAYMENT_TYPE AS A_PAYMENT_TYPE\n    ,S.PAY_DATE AS A_PAY_DATE\n    ,S.REFERENCE AS A_REFERENCE\n    ,S.STATUS AS A_STATUS\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_DATE_DTS\n    ,S.BATCH_PAYMENT_IS_RECONCILED AS B_BATCH_PAYMENT_IS_RECONCILED    \n    --BOOLEAN\n    ,S.HAS_ACCOUNT::BOOLEAN AS B_HAS_ACCOUNT\n    ,S.IS_RECONCILED::BOOLEAN AS B_IS_RECONCILED\n    ,S.HAS_VALIDATION_ERRORS::BOOLEAN AS B_HAS_VALIDATION_ERRORS\n    --METRICS    \n    ,S.AMOUNT::DECIMAL(15,2) AS M_AMOUNT\n    ,S.BANK_AMOUNT::DECIMAL(15,2) AS M_BANK_AMOUNT\n    ,S.BATCH_PAYMENT_TOTAL_AMOUNT::DECIMAL(15,2) AS M_BATCH_PAYMENT_TOTAL_AMOUNT\n    ,S.CURRENCY_RATE::DECIMAL(15,2) AS M_CURRENCY_RATE\n        --METADATA (MD)\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM \n    source S\n    LEFT JOIN account A on A.K_ACCOUNT_BK = S.ACCOUNT_ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_PAYMENTS_STG"}, "model.dlh_xero.V_PURCHASE_ORDERS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH PURCHASE_HEADER AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('V_XER_PURCHASE_ORDER_HEADER_STG')}}\n),\nPURCHASE_LINE AS (\n  SELECT\n  *\n  FROM\n    {{ref('V_XER_PURCHASE_ORDER_LINE_STG')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    PL.K_PURCHASE_LINE_ITEM_DLHK\n    ,S.K_PURCHASE_ORDER_DLHK\n    ,S.K_CONTACT_DLHK\n    ,S.K_BRANDING_THEME_DLHK\n    ,PL.K_ACCOUNT_DLHK\n    ,PL.K_ITEM_DLHK\n    --BUSINESS KEYS\n    ,PL.K_ACCOUNT_BK\n    ,PL.K_ITEM_BK\n    ,S.K_PURCHASE_ORDER_BK\n    ,S.K_BRANDING_THEME_BK\n    ,S.K_CONTACT_BK\n    --ATTRIBUTES\n    ,S.A_ATTENTION_TO\n    ,S.A_CURRENCY_CODE\n    ,S.A_DELIVERY_ADDRESS\n    ,S.A_DELIVERY_DATE\n    ,S.A_DELIVERY_INSTRUCTIONS\n    ,S.A_LINE_AMOUNT_TYPES\n    ,S.A_PO_DATE\n    ,S.A_PURCHASE_ORDER_NUMBER\n    ,S.A_REFERENCE\n    ,S.A_STATUS\n    ,S.A_TELEPHONE\n    ,S.A_TYPE\n    ,S.A_UPDATED_DATE_DTS\n\n    ,PL.A_DESCRIPTION AS A_PURCHASE_LINE_DESCRIPTION\n    ,PL.A_TAX_TYPE AS A_PURCHASE_LINE_TAX_TYPE\n    --BOOLEAN\n    ,S.B_IS_DISCOUNTED\n    --METRICS\n    ,PL.M_DISCOUNT_RATE\n    ,PL.M_GROSS_AMOUNT\n    ,PL.M_DISCOUNT_AMOUNT\n    ,PL.M_LINE_AMOUNT\n    ,PL.M_QUANTITY\n    ,PL.M_TAX_AMOUNT\n    ,PL.M_UNIT_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    PURCHASE_HEADER S\n    LEFT JOIN PURCHASE_LINE PL on PL.K_PURCHASE_ORDER_DLHK = S.K_PURCHASE_ORDER_DLHK    \n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_PURCHASE_ORDER_HEADER_STG", "model.dlh_xero.V_PURCHASE_ORDER_LINE_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "PURCHASES", "V_PURCHASE_ORDERS_STG"], "unique_id": "model.dlh_xero.V_PURCHASE_ORDERS_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/PURCHASES/V_PURCHASE_ORDERS_STG.sql", "original_file_path": "models/staging/PURCHASES/V_PURCHASE_ORDERS_STG.sql", "name": "V_PURCHASE_ORDERS_STG", "alias": "V_PURCHASE_ORDERS_STG", "checksum": {"name": "sha256", "checksum": "3d9776237c9f98b94c8070e4c9637003a7908b5d3657ad8031cc38a1d774735e"}, "tags": ["staging", "daily"], "refs": [["V_PURCHASE_ORDER_HEADER_STG"], ["V_PURCHASE_ORDER_LINE_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/PURCHASES/V_PURCHASE_ORDERS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH PURCHASE_HEADER AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.V_PURCHASE_ORDER_HEADER_STG\n),\nPURCHASE_LINE AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DBT_XERO.V_PURCHASE_ORDER_LINE_STG\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    PL.K_PURCHASE_LINE_ITEM_DLHK\n    ,S.K_PURCHASE_ORDER_DLHK\n    ,S.K_CONTACT_DLHK\n    ,S.K_BRANDING_THEME_DLHK\n    ,PL.K_ACCOUNT_DLHK\n    ,PL.K_ITEM_DLHK\n    --BUSINESS KEYS\n    ,PL.K_ACCOUNT_BK\n    ,PL.K_ITEM_BK\n    ,S.K_PURCHASE_ORDER_BK\n    ,S.K_BRANDING_THEME_BK\n    ,S.K_CONTACT_BK\n    --ATTRIBUTES\n    ,S.A_ATTENTION_TO\n    ,S.A_CURRENCY_CODE\n    ,S.A_DELIVERY_ADDRESS\n    ,S.A_DELIVERY_DATE\n    ,S.A_DELIVERY_INSTRUCTIONS\n    ,S.A_LINE_AMOUNT_TYPES\n    ,S.A_PO_DATE\n    ,S.A_PURCHASE_ORDER_NUMBER\n    ,S.A_REFERENCE\n    ,S.A_STATUS\n    ,S.A_TELEPHONE\n    ,S.A_TYPE\n    ,S.A_UPDATED_DATE_DTS\n\n    ,PL.A_DESCRIPTION AS A_PURCHASE_LINE_DESCRIPTION\n    ,PL.A_TAX_TYPE AS A_PURCHASE_LINE_TAX_TYPE\n    --BOOLEAN\n    ,S.B_IS_DISCOUNTED\n    --METRICS\n    ,PL.M_DISCOUNT_RATE\n    ,PL.M_GROSS_AMOUNT\n    ,PL.M_DISCOUNT_AMOUNT\n    ,PL.M_LINE_AMOUNT\n    ,PL.M_QUANTITY\n    ,PL.M_TAX_AMOUNT\n    ,PL.M_UNIT_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    PURCHASE_HEADER S\n    LEFT JOIN PURCHASE_LINE PL on PL.K_PURCHASE_ORDER_DLHK = S.K_PURCHASE_ORDER_DLHK    \n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_PURCHASE_ORDERS_STG"}, "model.dlh_xero.V_PURCHASE_ORDER_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'PURCHASE_ORDER')}}\n),\ncontacts AS (\n  SELECT\n  *\n  FROM\n    {{ref('W_XER_CONTACTS_D')}}\n),\nbranding_theme AS (\n  SELECT\n  *\n  FROM\n    {{ref('V_XER_BRANDING_THEME_STG')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.PURCHASE_ORDER_ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_ORDER_DLHK\n    ,C.K_CONTACT_DLHK\n    ,B.K_BRANDING_THEME_DLHK\n    --BUSINESS KEYS\n    ,S.PURCHASE_ORDER_ID AS K_PURCHASE_ORDER_BK\n    ,S.BRANDING_THEME_ID AS K_BRANDING_THEME_BK\n    ,S.CONTACT_ID AS K_CONTACT_BK\n    --ATTRIBUTES\n    ,S.ATTENTION_TO AS A_ATTENTION_TO\n    ,S.CURRENCY_CODE AS A_CURRENCY_CODE\n    ,S.DELIVERY_ADDRESS AS A_DELIVERY_ADDRESS\n    ,S.DELIVERY_DATE AS A_DELIVERY_DATE\n    ,S.DELIVERY_INSTRUCTIONS AS A_DELIVERY_INSTRUCTIONS\n    ,S.LINE_AMOUNT_TYPES AS A_LINE_AMOUNT_TYPES\n    ,S.PO_DATE AS A_PO_DATE\n    ,S.PURCHASE_ORDER_NUMBER AS A_PURCHASE_ORDER_NUMBER\n    ,S.REFERENCE AS A_REFERENCE\n    ,S.STATUS AS A_STATUS\n    ,S.TELEPHONE AS A_TELEPHONE\n    ,S.TYPE AS A_TYPE\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_DATE_DTS \n\n    --metrics\n\n    --BOOLEAN\n    ,S.IS_DISCOUNTED AS B_IS_DISCOUNTED\n    --METRICS\n    ,S.CURRENCY_RATE AS M_CURRENCY_RATE\n    ,S.SUB_TOTAL AS M_SUB_TOTAL\n    ,S.TOTAL AS M_TOTAL\n    ,S.TOTAL_TAX AS M_TOTAL_TAX\n\n\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source S\n    LEFT JOIN contacts C on C.K_CONTACT_BK = S.CONTACT_ID    \n    LEFT JOIN branding_theme B ON B.K_BRANDING_THEME_BK = S.BRANDING_THEME_ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.PURCHASE_ORDER", "model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.V_BRANDING_THEME_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "PURCHASES", "V_PURCHASE_ORDER_HEADER_STG"], "unique_id": "model.dlh_xero.V_PURCHASE_ORDER_HEADER_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/PURCHASES/V_PURCHASE_ORDER_HEADER_STG.sql", "original_file_path": "models/staging/PURCHASES/V_PURCHASE_ORDER_HEADER_STG.sql", "name": "V_PURCHASE_ORDER_HEADER_STG", "alias": "V_PURCHASE_ORDER_HEADER_STG", "checksum": {"name": "sha256", "checksum": "41a06cec2735ea53617409e05b0ed09ffb0a9cadd4f66e02920b8fcd4ba05f35"}, "tags": ["staging", "daily"], "refs": [["W_CONTACTS_D"], ["V_BRANDING_THEME_STG"]], "sources": [["DEMO_XERO", "PURCHASE_ORDER"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/PURCHASES/V_PURCHASE_ORDER_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"PURCHASE_ORDER\"\n),\ncontacts AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D\n),\nbranding_theme AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DBT_XERO.V_BRANDING_THEME_STG\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.PURCHASE_ORDER_ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_ORDER_DLHK\n    ,C.K_CONTACT_DLHK\n    ,B.K_BRANDING_THEME_DLHK\n    --BUSINESS KEYS\n    ,S.PURCHASE_ORDER_ID AS K_PURCHASE_ORDER_BK\n    ,S.BRANDING_THEME_ID AS K_BRANDING_THEME_BK\n    ,S.CONTACT_ID AS K_CONTACT_BK\n    --ATTRIBUTES\n    ,S.ATTENTION_TO AS A_ATTENTION_TO\n    ,S.CURRENCY_CODE AS A_CURRENCY_CODE\n    ,S.DELIVERY_ADDRESS AS A_DELIVERY_ADDRESS\n    ,S.DELIVERY_DATE AS A_DELIVERY_DATE\n    ,S.DELIVERY_INSTRUCTIONS AS A_DELIVERY_INSTRUCTIONS\n    ,S.LINE_AMOUNT_TYPES AS A_LINE_AMOUNT_TYPES\n    ,S.PO_DATE AS A_PO_DATE\n    ,S.PURCHASE_ORDER_NUMBER AS A_PURCHASE_ORDER_NUMBER\n    ,S.REFERENCE AS A_REFERENCE\n    ,S.STATUS AS A_STATUS\n    ,S.TELEPHONE AS A_TELEPHONE\n    ,S.TYPE AS A_TYPE\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_DATE_DTS \n\n    --metrics\n\n    --BOOLEAN\n    ,S.IS_DISCOUNTED AS B_IS_DISCOUNTED\n    --METRICS\n    ,S.CURRENCY_RATE AS M_CURRENCY_RATE\n    ,S.SUB_TOTAL AS M_SUB_TOTAL\n    ,S.TOTAL AS M_TOTAL\n    ,S.TOTAL_TAX AS M_TOTAL_TAX\n\n\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    source S\n    LEFT JOIN contacts C on C.K_CONTACT_BK = S.CONTACT_ID    \n    LEFT JOIN branding_theme B ON B.K_BRANDING_THEME_BK = S.BRANDING_THEME_ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_PURCHASE_ORDER_HEADER_STG"}, "model.dlh_xero.V_PURCHASE_ORDER_LINE_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'PURCHASE_ORDER_LINE_ITEM')}}\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_XER_ACCOUNTS_D')}}\n),\nitem AS (\n  SELECT \n  * \n  FROM  \t\n     {{ref('W_XER_ITEMS_D')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.LINE_ITEM_ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_LINE_ITEM_DLHK\n    ,MD5( TRIM(COALESCE(S.PURCHASE_ORDER_ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_ORDER_DLHK\n    ,A.K_ACCOUNT_DLHK\n    ,I.K_ITEM_DLHK\n    --attributes\n    --BK\n    ,A.K_ACCOUNT_BK\n    ,I.K_ITEM_BK\n    ,S.LINE_ITEM_ID AS K_PURCHASE_LINE_ITEM_BK\n    ,S.PURCHASE_ORDER_ID AS K_PURCHASE_ORDER_BK\n    ,S.ACCOUNT_CODE AS A_ACCOUNT_CODE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.ITEM_CODE AS A_ITEM_CODE\n    ,S.TAX_TYPE AS A_TAX_TYPE\n    --metrics\n    ,DIV0(S.DISCOUNT_RATE,100)::DECIMAL(15,2) AS M_DISCOUNT_RATE\n    ,(S.UNIT_AMOUNT * S.QUANTITY)::DECIMAL(15,2) AS M_GROSS_AMOUNT\n    ,(M_GROSS_AMOUNT * M_DISCOUNT_RATE)::DECIMAL(15,2) AS M_DISCOUNT_AMOUNT\n    ,S.LINE_AMOUNT::DECIMAL(15,2) AS M_LINE_AMOUNT\n    ,S.QUANTITY::DECIMAL(15,2) AS M_QUANTITY\n    ,S.TAX_AMOUNT::DECIMAL(15,2) AS M_TAX_AMOUNT\n    ,S.UNIT_AMOUNT::DECIMAL(15,2) AS M_UNIT_AMOUNT\nFROM\n    source S\n    LEFT JOIN account A on A.A_CODE = S.ACCOUNT_CODE\n    LEFT JOIN item I ON I.A_CODE = S.ITEM_CODE\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.PURCHASE_ORDER_LINE_ITEM", "model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "PURCHASES", "V_PURCHASE_ORDER_LINE_STG"], "unique_id": "model.dlh_xero.V_PURCHASE_ORDER_LINE_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/PURCHASES/V_PURCHASE_ORDER_LINE_STG.sql", "original_file_path": "models/staging/PURCHASES/V_PURCHASE_ORDER_LINE_STG.sql", "name": "V_PURCHASE_ORDER_LINE_STG", "alias": "V_PURCHASE_ORDER_LINE_STG", "checksum": {"name": "sha256", "checksum": "03cb4b28f5eb9ab1a915f9c515465bcad43ee98cb1d1345cd7a9c13a7e51a59f"}, "tags": ["staging", "daily"], "refs": [["W_ACCOUNTS_D"], ["W_ITEMS_D"]], "sources": [["DEMO_XERO", "PURCHASE_ORDER_LINE_ITEM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/PURCHASES/V_PURCHASE_ORDER_LINE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"PURCHASE_ORDER_LINE_ITEM\"\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n),\nitem AS (\n  SELECT \n  * \n  FROM  \t\n     DEVELOPER_SANDBOX.DBT_XERO.W_ITEMS_D\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.LINE_ITEM_ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_LINE_ITEM_DLHK\n    ,MD5( TRIM(COALESCE(S.PURCHASE_ORDER_ID,'00000000000000000000000000000000')) ) AS K_PURCHASE_ORDER_DLHK\n    ,A.K_ACCOUNT_DLHK\n    ,I.K_ITEM_DLHK\n    --attributes\n    --BK\n    ,A.K_ACCOUNT_BK\n    ,I.K_ITEM_BK\n    ,S.LINE_ITEM_ID AS K_PURCHASE_LINE_ITEM_BK\n    ,S.PURCHASE_ORDER_ID AS K_PURCHASE_ORDER_BK\n    ,S.ACCOUNT_CODE AS A_ACCOUNT_CODE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.ITEM_CODE AS A_ITEM_CODE\n    ,S.TAX_TYPE AS A_TAX_TYPE\n    --metrics\n    ,DIV0(S.DISCOUNT_RATE,100)::DECIMAL(15,2) AS M_DISCOUNT_RATE\n    ,(S.UNIT_AMOUNT * S.QUANTITY)::DECIMAL(15,2) AS M_GROSS_AMOUNT\n    ,(M_GROSS_AMOUNT * M_DISCOUNT_RATE)::DECIMAL(15,2) AS M_DISCOUNT_AMOUNT\n    ,S.LINE_AMOUNT::DECIMAL(15,2) AS M_LINE_AMOUNT\n    ,S.QUANTITY::DECIMAL(15,2) AS M_QUANTITY\n    ,S.TAX_AMOUNT::DECIMAL(15,2) AS M_TAX_AMOUNT\n    ,S.UNIT_AMOUNT::DECIMAL(15,2) AS M_UNIT_AMOUNT\nFROM\n    source S\n    LEFT JOIN account A on A.A_CODE = S.ACCOUNT_CODE\n    LEFT JOIN item I ON I.A_CODE = S.ITEM_CODE\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_PURCHASE_ORDER_LINE_STG"}, "model.dlh_xero.V_CONTACTS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'CONTACTS')}}\n),\ncontact_group_member AS (\n  SELECT\n  *\n  FROM\n    {{source(var('source_schema'),'CONTACT_GROUP_MEMBER')}}\n),\ncontact_group AS (\n  SELECT\n  *\n  FROM\n    {{source(var('source_schema'),'CONTACT_GROUP')}}\n),\nbranding_theme AS (\n  SELECT\n  *\n  FROM\n    {{ref('V_XER_BRANDING_THEME_STG')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.CONTACT_ID,'00000000000000000000000000000000')) ) AS K_CONTACT_DLHK\n    ,B.K_BRANDING_THEME_DLHK\n    --BK\n    ,S.CONTACT_ID AS K_CONTACT_BK\n    ,CG.CONTACT_GROUP_ID AS K_CONTACT_GROUP_BK\n    ,S.BRANDING_THEME_ID AS K_BRANDING_THEME_BK    \n    --ATTRIBUTES\n    ,CG.NAME AS A_CONTACT_GROUP_NAME\n    ,CG.STATUS AS A_CONTACT_GROUP_STATUS\n    ,B.A_BRANDING_THEME_NAME\n    ,S.ACCOUNTS_PAYABLE_TAX_TYPE AS A_ACCOUNTS_PAYABLE_TAX_TYPE\n    ,S.ACCOUNTS_RECEIVABLE_TAX_TYPE AS A_ACCOUNTS_RECEIVABLE_TAX_TYPE\n    ,S.ACCOUNT_NUMBER AS A_ACCOUNT_NUMBER\n    ,S.BANK_ACCOUNT_DETAILS AS A_BANK_ACCOUNT_DETAILS\n    ,S.BATCH_PAYMENTS_BANK_ACCOUNT_NAME AS A_BATCH_PAYMENTS_BANK_ACCOUNT_NAME\n    ,S.BATCH_PAYMENTS_BANK_ACCOUNT_NUMBER AS A_BATCH_PAYMENTS_BANK_ACCOUNT_NUMBER\n    ,S.BATCH_PAYMENTS_CODE AS A_BATCH_PAYMENTS_CODE\n    ,S.BATCH_PAYMENTS_DETAILS AS A_BATCH_PAYMENTS_DETAILS\n    ,S.BATCH_PAYMENTS_REFERENCE AS A_BATCH_PAYMENTS_REFERENCE\n    ,S.CONTACT_NUMBER AS A_CONTACT_NUMBER\n    ,S.CONTACT_STATUS AS A_CONTACT_STATUS\n    ,S.DEFAULT_CURRENCY AS A_DEFAULT_CURRENCY\n    ,S.EMAIL_ADDRESS AS A_EMAIL_ADDRESS\n    ,S.FIRST_NAME AS A_FIRST_NAME\n    ,S.LAST_NAME AS A_LAST_NAME\n    ,{{full_name('FIRST_NAME', 'LAST_NAME')}} AS A_FULL_NAME\n    ,S.NAME AS A_NAME\n    ,S.PURCHASES_DEFAULT_ACCOUNT_CODE AS A_PURCHASES_DEFAULT_ACCOUNT_CODE\n    ,S.SALES_DEFAULT_ACCOUNT_CODE AS A_SALES_DEFAULT_ACCOUNT_CODE\n    ,S.SKYPE_USER_NAME AS A_SKYPE_USER_NAME\n    ,S.TAX_NUMBER AS A_TAX_NUMBER\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_AT_DTS\n    ,S.WEBSITE AS A_WEBSITE\n    ,S.XERO_NETWORK_KEY AS A_XERO_NETWORK_KEY    \n    --BOOLEANS\n    ,S.HAS_ATTACHMENTS AS B_HAS_ATTACHMENTS\n    ,S.IS_CUSTOMER AS B_IS_CUSTOMER\n    ,S.IS_SUPPLIER AS B_IS_SUPPLIER\n    ,S.CONTACT_STATUS='ACTIVE' AS B_IS_ACTIVE\n    ,S.HAS_VALIDATION_ERRORS::BOOLEAN AS B_HAS_VALIDATION_ERRORS\n    --METRICS\n    ,S.BALANCES_ACCOUNTS_PAYABLE_OUTSTANDING::DECIMAL(15,2) AS M_BALANCES_ACCOUNTS_PAYABLE_OUTSTANDING\n    ,S.BALANCES_ACCOUNTS_PAYABLE_OVERDUE::DECIMAL(15,2) AS M_BALANCES_ACCOUNTS_PAYABLE_OVERDUE\n    ,S.BALANCES_ACCOUNTS_RECEIVABLE_OUTSTANDING::DECIMAL(15,2) AS M_BALANCES_ACCOUNTS_RECEIVABLE_OUTSTANDING\n    ,S.BALANCES_ACCOUNTS_RECEIVABLE_OVERDUE::DECIMAL(15,2) AS M_BALANCES_ACCOUNTS_RECEIVABLE_OVERDUE\n    ,S.DISCOUNT AS M_DISCOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source S\n    LEFT JOIN contact_group_member CGM on CGM.CONTACT_ID = S.CONTACT_ID\n    LEFT JOIN contact_group CG on CG.CONTACT_GROUP_ID = CGM.CONTACT_GROUP_ID -- CAN I HAVE MORE THAN ONE CONTACT_GROUP PER CONTACT? ON THE CURRENT MODEL WE DON'T HAVE ANY CONTACT GROUPS\n    LEFT JOIN branding_theme B ON B.K_BRANDING_THEME_BK = S.BRANDING_THEME_ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dlh_xero.full_name"], "nodes": ["source.dlh_xero.DEMO_XERO.CONTACTS", "source.dlh_xero.DEMO_XERO.CONTACT_GROUP_MEMBER", "source.dlh_xero.DEMO_XERO.CONTACT_GROUP", "model.dlh_xero.V_BRANDING_THEME_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "CONTACTS", "V_CONTACTS_STG"], "unique_id": "model.dlh_xero.V_CONTACTS_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/CONTACTS/V_CONTACTS_STG.sql", "original_file_path": "models/staging/CONTACTS/V_CONTACTS_STG.sql", "name": "V_CONTACTS_STG", "alias": "V_CONTACTS_STG", "checksum": {"name": "sha256", "checksum": "588d9c6642431f0efde17d6105362df4ac38899d06bcbe51f4a580d22d8d165b"}, "tags": ["staging", "daily"], "refs": [["V_BRANDING_THEME_STG"]], "sources": [["DEMO_XERO", "CONTACTS"], ["DEMO_XERO", "CONTACT_GROUP_MEMBER"], ["DEMO_XERO", "CONTACT_GROUP"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/CONTACTS/V_CONTACTS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"CONTACTS\"\n),\ncontact_group_member AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DEMO_XERO.\"CONTACT_GROUP_MEMBER\"\n),\ncontact_group AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DEMO_XERO.\"CONTACT_GROUP\"\n),\nbranding_theme AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DBT_XERO.V_BRANDING_THEME_STG\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.CONTACT_ID,'00000000000000000000000000000000')) ) AS K_CONTACT_DLHK\n    ,B.K_BRANDING_THEME_DLHK\n    --BK\n    ,S.CONTACT_ID AS K_CONTACT_BK\n    ,CG.CONTACT_GROUP_ID AS K_CONTACT_GROUP_BK\n    ,S.BRANDING_THEME_ID AS K_BRANDING_THEME_BK    \n    --ATTRIBUTES\n    ,CG.NAME AS A_CONTACT_GROUP_NAME\n    ,CG.STATUS AS A_CONTACT_GROUP_STATUS\n    ,B.A_BRANDING_THEME_NAME\n    ,S.ACCOUNTS_PAYABLE_TAX_TYPE AS A_ACCOUNTS_PAYABLE_TAX_TYPE\n    ,S.ACCOUNTS_RECEIVABLE_TAX_TYPE AS A_ACCOUNTS_RECEIVABLE_TAX_TYPE\n    ,S.ACCOUNT_NUMBER AS A_ACCOUNT_NUMBER\n    ,S.BANK_ACCOUNT_DETAILS AS A_BANK_ACCOUNT_DETAILS\n    ,S.BATCH_PAYMENTS_BANK_ACCOUNT_NAME AS A_BATCH_PAYMENTS_BANK_ACCOUNT_NAME\n    ,S.BATCH_PAYMENTS_BANK_ACCOUNT_NUMBER AS A_BATCH_PAYMENTS_BANK_ACCOUNT_NUMBER\n    ,S.BATCH_PAYMENTS_CODE AS A_BATCH_PAYMENTS_CODE\n    ,S.BATCH_PAYMENTS_DETAILS AS A_BATCH_PAYMENTS_DETAILS\n    ,S.BATCH_PAYMENTS_REFERENCE AS A_BATCH_PAYMENTS_REFERENCE\n    ,S.CONTACT_NUMBER AS A_CONTACT_NUMBER\n    ,S.CONTACT_STATUS AS A_CONTACT_STATUS\n    ,S.DEFAULT_CURRENCY AS A_DEFAULT_CURRENCY\n    ,S.EMAIL_ADDRESS AS A_EMAIL_ADDRESS\n    ,S.FIRST_NAME AS A_FIRST_NAME\n    ,S.LAST_NAME AS A_LAST_NAME\n    ,\n    (COALESCE(FIRST_NAME,'') || COALESCE(LAST_NAME,''))\n AS A_FULL_NAME\n    ,S.NAME AS A_NAME\n    ,S.PURCHASES_DEFAULT_ACCOUNT_CODE AS A_PURCHASES_DEFAULT_ACCOUNT_CODE\n    ,S.SALES_DEFAULT_ACCOUNT_CODE AS A_SALES_DEFAULT_ACCOUNT_CODE\n    ,S.SKYPE_USER_NAME AS A_SKYPE_USER_NAME\n    ,S.TAX_NUMBER AS A_TAX_NUMBER\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_AT_DTS\n    ,S.WEBSITE AS A_WEBSITE\n    ,S.XERO_NETWORK_KEY AS A_XERO_NETWORK_KEY    \n    --BOOLEANS\n    ,S.HAS_ATTACHMENTS AS B_HAS_ATTACHMENTS\n    ,S.IS_CUSTOMER AS B_IS_CUSTOMER\n    ,S.IS_SUPPLIER AS B_IS_SUPPLIER\n    ,S.CONTACT_STATUS='ACTIVE' AS B_IS_ACTIVE\n    ,S.HAS_VALIDATION_ERRORS::BOOLEAN AS B_HAS_VALIDATION_ERRORS\n    --METRICS\n    ,S.BALANCES_ACCOUNTS_PAYABLE_OUTSTANDING::DECIMAL(15,2) AS M_BALANCES_ACCOUNTS_PAYABLE_OUTSTANDING\n    ,S.BALANCES_ACCOUNTS_PAYABLE_OVERDUE::DECIMAL(15,2) AS M_BALANCES_ACCOUNTS_PAYABLE_OVERDUE\n    ,S.BALANCES_ACCOUNTS_RECEIVABLE_OUTSTANDING::DECIMAL(15,2) AS M_BALANCES_ACCOUNTS_RECEIVABLE_OUTSTANDING\n    ,S.BALANCES_ACCOUNTS_RECEIVABLE_OVERDUE::DECIMAL(15,2) AS M_BALANCES_ACCOUNTS_RECEIVABLE_OVERDUE\n    ,S.DISCOUNT AS M_DISCOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    source S\n    LEFT JOIN contact_group_member CGM on CGM.CONTACT_ID = S.CONTACT_ID\n    LEFT JOIN contact_group CG on CG.CONTACT_GROUP_ID = CGM.CONTACT_GROUP_ID -- CAN I HAVE MORE THAN ONE CONTACT_GROUP PER CONTACT? ON THE CURRENT MODEL WE DON'T HAVE ANY CONTACT GROUPS\n    LEFT JOIN branding_theme B ON B.K_BRANDING_THEME_BK = S.BRANDING_THEME_ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_CONTACTS_STG"}, "model.dlh_xero.V_DATE_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"]\n)\n}}\n\nSELECT \n     to_date('2015-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as DD, /*<<Modify date for preferred table start date*/\n      seq1() as Sl,row_number() over (order by Sl) as row_numbers,\n      dateadd(day,row_numbers,DD) as V_DATE,\n      case when date_part(dd, V_DATE) < 10 and date_part(mm, V_DATE) > 9 then\n        date_part(year, V_DATE)||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) < 10 and  date_part(mm, V_DATE) < 10 then \n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) < 10 then\n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) > 9 then\n         date_part(year, V_DATE)||date_part(mm, V_DATE)||date_part(dd, V_DATE) end as DATE_KEY,\n      V_DATE as DATE_COLUMN,\n      dayname(dateadd(day,row_numbers,DD)) as DAY_NAME_1,\n      case \n        when dayname(dateadd(day,row_numbers,DD)) = 'Mon' then 'Monday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Tue' then 'Tuesday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Wed' then 'Wednesday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Thu' then 'Thursday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Fri' then 'Friday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sat' then 'Saturday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sun' then 'Sunday' end ||', '||\n      case when monthname(dateadd(day,row_numbers,DD)) ='Jan' then 'January'\n           when monthname(dateadd(day,row_numbers,DD)) ='Feb' then 'February'\n           when monthname(dateadd(day,row_numbers,DD)) ='Mar' then 'March'\n           when monthname(dateadd(day,row_numbers,DD)) ='Apr' then 'April'\n           when monthname(dateadd(day,row_numbers,DD)) ='May' then 'May'\n           when monthname(dateadd(day,row_numbers,DD)) ='Jun' then 'June'\n           when monthname(dateadd(day,row_numbers,DD)) ='Jul' then 'July'\n           when monthname(dateadd(day,row_numbers,DD)) ='Aug' then 'August'\n           when monthname(dateadd(day,row_numbers,DD)) ='Sep' then 'September'\n           when monthname(dateadd(day,row_numbers,DD)) ='Oct' then 'October'\n           when monthname(dateadd(day,row_numbers,DD)) ='Nov' then 'November'\n           when monthname(dateadd(day,row_numbers,DD)) ='Dec' then 'December' end\n           ||' '|| to_varchar(dateadd(day,row_numbers,DD), ' dd, yyyy') as FULL_DATE_DESC,\n      dateadd(day,row_numbers,DD) as V_DATE_1,\n      dayofweek(V_DATE_1)+1 as DAY_NUM_IN_WEEK,\n      Date_part(dd,V_DATE_1) as DAY_NUM_IN_MONTH,\n      dayofyear(V_DATE_1) as DAY_NUM_IN_YEAR,\n      case \n        when dayname(V_DATE_1) = 'Mon' then 'Monday'\n        when dayname(V_DATE_1) = 'Tue' then 'Tuesday'\n        when dayname(V_DATE_1) = 'Wed' then 'Wednesday'\n        when dayname(V_DATE_1) = 'Thu' then 'Thursday'\n        when dayname(V_DATE_1) = 'Fri' then 'Friday'\n        when dayname(V_DATE_1) = 'Sat' then 'Saturday'\n        when dayname(V_DATE_1) = 'Sun' then 'Sunday' end as DAY_NAME,\n      dayname(dateadd(day,row_numbers,DD)) as DAY_ABBREV,\n      case  \n        when dayname(V_DATE_1) = 'Sun' and dayname(V_DATE_1) = 'Sat' then \n                 'Not-Weekday'\n        else 'Weekday' end as WEEKDAY_IND,\n       case \n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0704' or\n        DATE_KEY = date_part(year, V_DATE)||'1225' or DATE_KEY = date_part(year, V_DATE)||'1226') then  \n        'Holiday' \n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Wed' \n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Thu' \n        and dateadd(day,-3,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Fri' \n        and dateadd(day,-4,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sat' \n        and dateadd(day,-5,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sun' \n        and dateadd(day,-6,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Mon' \n        and last_day(V_DATE_1) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Tue' \n        and dateadd(day,-1 ,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n        and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n        and (dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  or \n           dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n        and ( dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n        and ( dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,20,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n         'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n        and ( dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n        and ( dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n        and (dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n        and (dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n         'Holiday'    \n        else\n        'Not-Holiday' end as US_HOLIDAY_IND,\n      /*Modify the following for Company Specific Holidays*/\n      case \n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0219'\n        or DATE_KEY = date_part(year, V_DATE)||'0528' or DATE_KEY = date_part(year, V_DATE)||'0704' \n        or DATE_KEY = date_part(year, V_DATE)||'1225' )then \n        'Holiday'               \n                when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Fri' \n        and last_day(V_DATE_1) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sat' \n        and dateadd(day,-1,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sun' \n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue'\n                and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu'\n                and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n        and date_part(year, V_DATE_1)||'-04-01' = V_DATE_1 then\n        'Holiday'\n                when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-04-01'= V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday'   \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n        and dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n        and dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n        and dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n         'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n        and dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n        and dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n        and dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n        and dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n         'Holiday'     \n        else\n        'Not-Holiday' end as COMPANY_HOLIDAY_IND,\n      case                                           \n        when last_day(V_DATE_1) = V_DATE_1 then \n        'Month-end'\n        else 'Not-Month-end' end as MONTH_END_IND,\n          \n      case when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n            date_part(mm,date_trunc('week',V_DATE_1))||'0'||\n            date_part(dd,date_trunc('week',V_DATE_1))  \n         when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n            date_part(mm,date_trunc('week',V_DATE_1))||date_part(dd,date_trunc('week',V_DATE_1))    \n         when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||date_part(mm,date_trunc('week',V_DATE_1))||\n            '0'||date_part(dd,date_trunc('week',V_DATE_1))    \n        when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||\n            date_part(mm,date_trunc('week',V_DATE_1))||\n            date_part(dd,date_trunc('week',V_DATE_1)) end as WEEK_BEGIN_DATE_NKEY,\n      date_trunc('week',V_DATE_1) as WEEK_BEGIN_DATE,\n\n      case when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) < 10 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n            date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n            date_part(dd,last_day(V_DATE_1,'week')) \n         when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n            date_part(mm,last_day(V_DATE_1,'week'))||date_part(dd,last_day(V_DATE_1,'week'))   \n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) < 10  then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n            date_part(dd,last_day(V_DATE_1,'week'))   \n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||\n            date_part(mm,last_day(V_DATE_1,'week'))||\n            date_part(dd,last_day(V_DATE_1,'week')) end as WEEK_END_DATE_NKEY,\n      last_day(V_DATE_1,'week') as WEEK_END_DATE,\n      week(V_DATE_1) as WEEK_NUM_IN_YEAR,\n      case when monthname(V_DATE_1) ='Jan' then 'January'\n           when monthname(V_DATE_1) ='Feb' then 'February'\n           when monthname(V_DATE_1) ='Mar' then 'March'\n           when monthname(V_DATE_1) ='Apr' then 'April'\n           when monthname(V_DATE_1) ='May' then 'May'\n           when monthname(V_DATE_1) ='Jun' then 'June'\n           when monthname(V_DATE_1) ='Jul' then 'July'\n           when monthname(V_DATE_1) ='Aug' then 'August'\n           when monthname(V_DATE_1) ='Sep' then 'September'\n           when monthname(V_DATE_1) ='Oct' then 'October'\n           when monthname(V_DATE_1) ='Nov' then 'November'\n           when monthname(V_DATE_1) ='Dec' then 'December' end as MONTH_NAME,\n      monthname(V_DATE_1) as MONTH_ABBREV,\n      month(V_DATE_1) as MONTH_NUM_IN_YEAR,\n      case when month(V_DATE_1) < 10 then \n      year(V_DATE_1)||'-0'||month(V_DATE_1)   \n      else year(V_DATE_1)||'-'||month(V_DATE_1) end as YEARMONTH,\n      quarter(V_DATE_1) as CURRENT_QUARTER,\n      year(V_DATE_1)||'-0'||quarter(V_DATE_1) as YEARQUARTER,\n      year(V_DATE_1) as CURRENT_YEAR,\n      /*Modify the following based on company fiscal year - assumes Jan 01*/\n            to_date(year(V_DATE_1)||'-01-01','YYYY-MM-DD') as FISCAL_CUR_YEAR,\n            to_date(year(V_DATE_1) -1||'-01-01','YYYY-MM-DD') as FISCAL_PREV_YEAR,\n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\n      datediff('week', FISCAL_PREV_YEAR,V_DATE_1)\n      else \n      datediff('week', FISCAL_CUR_YEAR,V_DATE_1)  end as FISCAL_WEEK_NUM  ,\n      decode(datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ,-2,10,-1,11,0,12,\n                   datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ) as FISCAL_MONTH_NUM,\n      concat( year(FISCAL_CUR_YEAR) \n           ,case when to_number(FISCAL_MONTH_NUM) = 10 or \n              to_number(FISCAL_MONTH_NUM) = 11 or \n                            to_number(FISCAL_MONTH_NUM) = 12  then\n              '-'||FISCAL_MONTH_NUM\n          else  concat('-0',FISCAL_MONTH_NUM) end ) as FISCAL_YEARMONTH,\n      case when quarter(V_DATE_1) = 4 then 4\n         when quarter(V_DATE_1) = 3 then 3\n         when quarter(V_DATE_1) = 2 then 2\n         when quarter(V_DATE_1) = 1 then 1 end as FISCAL_QUARTER,\n      \n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\n          year(FISCAL_CUR_YEAR)\n          else year(FISCAL_CUR_YEAR)+1 end\n          ||'-0'||case when quarter(V_DATE_1) = 4 then 4\n           when quarter(V_DATE_1) = 3 then 3\n           when quarter(V_DATE_1) = 2 then 2\n           when quarter(V_DATE_1) = 1 then 1 end as FISCAL_YEARQUARTER,\n      case when quarter(V_DATE_1) = 4  then 2 when quarter(V_DATE_1) = 3 then 2\n        when quarter(V_DATE_1) = 1  then 1 when quarter(V_DATE_1) = 2 then 1\n      end as FISCAL_HALFYEAR,\n      year(FISCAL_CUR_YEAR) as FISCAL_YEAR,\n      to_timestamp_ntz(V_DATE) as SQL_TIMESTAMP,\n      'Y' as CURRENT_ROW_IND,\n      to_date(current_timestamp) as EFFECTIVE_DATE,\n      to_date('9999-12-31') as EXPIRA_DATE\n      from table(generator(rowcount => 8401)) /*<< Set to generate 20 years. Modify rowcount to increase or decrease size*/", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "DATE", "V_DATE_STG"], "unique_id": "model.dlh_xero.V_DATE_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/DATE/V_DATE_STG.sql", "original_file_path": "models/staging/DATE/V_DATE_STG.sql", "name": "V_DATE_STG", "alias": "V_DATE_STG", "checksum": {"name": "sha256", "checksum": "a45eb8d765e1e3cec97b3a74fe87c8445e9f55df1bad353367fe00075d8875cd"}, "tags": ["staging", "daily"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/DATE/V_DATE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nSELECT \n     to_date('2015-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS') as DD, /*<<Modify date for preferred table start date*/\n      seq1() as Sl,row_number() over (order by Sl) as row_numbers,\n      dateadd(day,row_numbers,DD) as V_DATE,\n      case when date_part(dd, V_DATE) < 10 and date_part(mm, V_DATE) > 9 then\n        date_part(year, V_DATE)||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) < 10 and  date_part(mm, V_DATE) < 10 then \n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||'0'||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) < 10 then\n         date_part(year, V_DATE)||'0'||date_part(mm, V_DATE)||date_part(dd, V_DATE)\n         when date_part(dd, V_DATE) > 9 and  date_part(mm, V_DATE) > 9 then\n         date_part(year, V_DATE)||date_part(mm, V_DATE)||date_part(dd, V_DATE) end as DATE_KEY,\n      V_DATE as DATE_COLUMN,\n      dayname(dateadd(day,row_numbers,DD)) as DAY_NAME_1,\n      case \n        when dayname(dateadd(day,row_numbers,DD)) = 'Mon' then 'Monday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Tue' then 'Tuesday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Wed' then 'Wednesday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Thu' then 'Thursday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Fri' then 'Friday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sat' then 'Saturday'\n        when dayname(dateadd(day,row_numbers,DD)) = 'Sun' then 'Sunday' end ||', '||\n      case when monthname(dateadd(day,row_numbers,DD)) ='Jan' then 'January'\n           when monthname(dateadd(day,row_numbers,DD)) ='Feb' then 'February'\n           when monthname(dateadd(day,row_numbers,DD)) ='Mar' then 'March'\n           when monthname(dateadd(day,row_numbers,DD)) ='Apr' then 'April'\n           when monthname(dateadd(day,row_numbers,DD)) ='May' then 'May'\n           when monthname(dateadd(day,row_numbers,DD)) ='Jun' then 'June'\n           when monthname(dateadd(day,row_numbers,DD)) ='Jul' then 'July'\n           when monthname(dateadd(day,row_numbers,DD)) ='Aug' then 'August'\n           when monthname(dateadd(day,row_numbers,DD)) ='Sep' then 'September'\n           when monthname(dateadd(day,row_numbers,DD)) ='Oct' then 'October'\n           when monthname(dateadd(day,row_numbers,DD)) ='Nov' then 'November'\n           when monthname(dateadd(day,row_numbers,DD)) ='Dec' then 'December' end\n           ||' '|| to_varchar(dateadd(day,row_numbers,DD), ' dd, yyyy') as FULL_DATE_DESC,\n      dateadd(day,row_numbers,DD) as V_DATE_1,\n      dayofweek(V_DATE_1)+1 as DAY_NUM_IN_WEEK,\n      Date_part(dd,V_DATE_1) as DAY_NUM_IN_MONTH,\n      dayofyear(V_DATE_1) as DAY_NUM_IN_YEAR,\n      case \n        when dayname(V_DATE_1) = 'Mon' then 'Monday'\n        when dayname(V_DATE_1) = 'Tue' then 'Tuesday'\n        when dayname(V_DATE_1) = 'Wed' then 'Wednesday'\n        when dayname(V_DATE_1) = 'Thu' then 'Thursday'\n        when dayname(V_DATE_1) = 'Fri' then 'Friday'\n        when dayname(V_DATE_1) = 'Sat' then 'Saturday'\n        when dayname(V_DATE_1) = 'Sun' then 'Sunday' end as DAY_NAME,\n      dayname(dateadd(day,row_numbers,DD)) as DAY_ABBREV,\n      case  \n        when dayname(V_DATE_1) = 'Sun' and dayname(V_DATE_1) = 'Sat' then \n                 'Not-Weekday'\n        else 'Weekday' end as WEEKDAY_IND,\n       case \n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0704' or\n        DATE_KEY = date_part(year, V_DATE)||'1225' or DATE_KEY = date_part(year, V_DATE)||'1226') then  \n        'Holiday' \n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Wed' \n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Thu' \n        and dateadd(day,-3,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Fri' \n        and dateadd(day,-4,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sat' \n        and dateadd(day,-5,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Sun' \n        and dateadd(day,-6,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Mon' \n        and last_day(V_DATE_1) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='May' and dayname(last_day(V_DATE_1)) = 'Tue' \n        and dateadd(day,-1 ,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n        and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n        and (dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  or \n           dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n        and ( dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n        and ( dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,20,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n         'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n        and ( dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n        and ( dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n        and (dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n        and (dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 or \n           dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 ) then\n         'Holiday'    \n        else\n        'Not-Holiday' end as US_HOLIDAY_IND,\n      /*Modify the following for Company Specific Holidays*/\n      case \n        when (DATE_KEY = date_part(year, V_DATE)||'0101' or DATE_KEY = date_part(year, V_DATE)||'0219'\n        or DATE_KEY = date_part(year, V_DATE)||'0528' or DATE_KEY = date_part(year, V_DATE)||'0704' \n        or DATE_KEY = date_part(year, V_DATE)||'1225' )then \n        'Holiday'               \n                when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Fri' \n        and last_day(V_DATE_1) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sat' \n        and dateadd(day,-1,last_day(V_DATE_1)) = V_DATE_1  then\n        'Holiday'\n        when monthname(V_DATE_1) ='Mar' and dayname(last_day(V_DATE_1)) = 'Sun' \n        and dateadd(day,-2,last_day(V_DATE_1)) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue'\n                and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu'\n                and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n        and date_part(year, V_DATE_1)||'-04-01' = V_DATE_1 then\n        'Holiday'\n                when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-04-01'= V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Apr' and dayname(date_part(year, V_DATE_1)||'-04-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-04-01')) = V_DATE_1  then\n        'Holiday'   \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Wed' \n        and dateadd(day,5,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Thu' \n        and dateadd(day,4,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Fri' \n        and dateadd(day,3,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sat' \n        and dateadd(day,2,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Sun' \n        and dateadd(day,1,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Mon' \n                and date_part(year, V_DATE_1)||'-09-01' = V_DATE_1 then\n        'Holiday' \n        when monthname(V_DATE_1) ='Sep' and dayname(date_part(year, V_DATE_1)||'-09-01') = 'Tue' \n        and dateadd(day,6 ,(date_part(year, V_DATE_1)||'-09-01')) = V_DATE_1  then\n        'Holiday' \n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Wed' \n        and dateadd(day,23,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Thu' \n        and dateadd(day,22,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Fri' \n        and dateadd(day,21,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n         'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sat' \n        and dateadd(day,27,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Sun' \n        and dateadd(day,26,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Mon' \n        and dateadd(day,25,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1 then\n        'Holiday'\n        when monthname(V_DATE_1) ='Nov' and dayname(date_part(year, V_DATE_1)||'-11-01') = 'Tue' \n        and dateadd(day,24,(date_part(year, V_DATE_1)||'-11-01')) = V_DATE_1  then\n         'Holiday'     \n        else\n        'Not-Holiday' end as COMPANY_HOLIDAY_IND,\n      case                                           \n        when last_day(V_DATE_1) = V_DATE_1 then \n        'Month-end'\n        else 'Not-Month-end' end as MONTH_END_IND,\n          \n      case when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n            date_part(mm,date_trunc('week',V_DATE_1))||'0'||\n            date_part(dd,date_trunc('week',V_DATE_1))  \n         when date_part(mm,date_trunc('week',V_DATE_1)) < 10 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||'0'||\n            date_part(mm,date_trunc('week',V_DATE_1))||date_part(dd,date_trunc('week',V_DATE_1))    \n         when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) < 10 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||date_part(mm,date_trunc('week',V_DATE_1))||\n            '0'||date_part(dd,date_trunc('week',V_DATE_1))    \n        when date_part(mm,date_trunc('week',V_DATE_1)) > 9 and date_part(dd,date_trunc('week',V_DATE_1)) > 9 then\n            date_part(yyyy,date_trunc('week',V_DATE_1))||\n            date_part(mm,date_trunc('week',V_DATE_1))||\n            date_part(dd,date_trunc('week',V_DATE_1)) end as WEEK_BEGIN_DATE_NKEY,\n      date_trunc('week',V_DATE_1) as WEEK_BEGIN_DATE,\n\n      case when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) < 10 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n            date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n            date_part(dd,last_day(V_DATE_1,'week')) \n         when  date_part(mm,last_day(V_DATE_1,'week')) < 10 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||'0'||\n            date_part(mm,last_day(V_DATE_1,'week'))||date_part(dd,last_day(V_DATE_1,'week'))   \n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) < 10  then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||date_part(mm,last_day(V_DATE_1,'week'))||'0'||\n            date_part(dd,last_day(V_DATE_1,'week'))   \n         when  date_part(mm,last_day(V_DATE_1,'week')) > 9 and date_part(dd,last_day(V_DATE_1,'week')) > 9 then\n            date_part(yyyy,last_day(V_DATE_1,'week'))||\n            date_part(mm,last_day(V_DATE_1,'week'))||\n            date_part(dd,last_day(V_DATE_1,'week')) end as WEEK_END_DATE_NKEY,\n      last_day(V_DATE_1,'week') as WEEK_END_DATE,\n      week(V_DATE_1) as WEEK_NUM_IN_YEAR,\n      case when monthname(V_DATE_1) ='Jan' then 'January'\n           when monthname(V_DATE_1) ='Feb' then 'February'\n           when monthname(V_DATE_1) ='Mar' then 'March'\n           when monthname(V_DATE_1) ='Apr' then 'April'\n           when monthname(V_DATE_1) ='May' then 'May'\n           when monthname(V_DATE_1) ='Jun' then 'June'\n           when monthname(V_DATE_1) ='Jul' then 'July'\n           when monthname(V_DATE_1) ='Aug' then 'August'\n           when monthname(V_DATE_1) ='Sep' then 'September'\n           when monthname(V_DATE_1) ='Oct' then 'October'\n           when monthname(V_DATE_1) ='Nov' then 'November'\n           when monthname(V_DATE_1) ='Dec' then 'December' end as MONTH_NAME,\n      monthname(V_DATE_1) as MONTH_ABBREV,\n      month(V_DATE_1) as MONTH_NUM_IN_YEAR,\n      case when month(V_DATE_1) < 10 then \n      year(V_DATE_1)||'-0'||month(V_DATE_1)   \n      else year(V_DATE_1)||'-'||month(V_DATE_1) end as YEARMONTH,\n      quarter(V_DATE_1) as CURRENT_QUARTER,\n      year(V_DATE_1)||'-0'||quarter(V_DATE_1) as YEARQUARTER,\n      year(V_DATE_1) as CURRENT_YEAR,\n      /*Modify the following based on company fiscal year - assumes Jan 01*/\n            to_date(year(V_DATE_1)||'-01-01','YYYY-MM-DD') as FISCAL_CUR_YEAR,\n            to_date(year(V_DATE_1) -1||'-01-01','YYYY-MM-DD') as FISCAL_PREV_YEAR,\n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\n      datediff('week', FISCAL_PREV_YEAR,V_DATE_1)\n      else \n      datediff('week', FISCAL_CUR_YEAR,V_DATE_1)  end as FISCAL_WEEK_NUM  ,\n      decode(datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ,-2,10,-1,11,0,12,\n                   datediff('MONTH',FISCAL_CUR_YEAR, V_DATE_1)+1 ) as FISCAL_MONTH_NUM,\n      concat( year(FISCAL_CUR_YEAR) \n           ,case when to_number(FISCAL_MONTH_NUM) = 10 or \n              to_number(FISCAL_MONTH_NUM) = 11 or \n                            to_number(FISCAL_MONTH_NUM) = 12  then\n              '-'||FISCAL_MONTH_NUM\n          else  concat('-0',FISCAL_MONTH_NUM) end ) as FISCAL_YEARMONTH,\n      case when quarter(V_DATE_1) = 4 then 4\n         when quarter(V_DATE_1) = 3 then 3\n         when quarter(V_DATE_1) = 2 then 2\n         when quarter(V_DATE_1) = 1 then 1 end as FISCAL_QUARTER,\n      \n      case when   V_DATE_1 < FISCAL_CUR_YEAR then\n          year(FISCAL_CUR_YEAR)\n          else year(FISCAL_CUR_YEAR)+1 end\n          ||'-0'||case when quarter(V_DATE_1) = 4 then 4\n           when quarter(V_DATE_1) = 3 then 3\n           when quarter(V_DATE_1) = 2 then 2\n           when quarter(V_DATE_1) = 1 then 1 end as FISCAL_YEARQUARTER,\n      case when quarter(V_DATE_1) = 4  then 2 when quarter(V_DATE_1) = 3 then 2\n        when quarter(V_DATE_1) = 1  then 1 when quarter(V_DATE_1) = 2 then 1\n      end as FISCAL_HALFYEAR,\n      year(FISCAL_CUR_YEAR) as FISCAL_YEAR,\n      to_timestamp_ntz(V_DATE) as SQL_TIMESTAMP,\n      'Y' as CURRENT_ROW_IND,\n      to_date(current_timestamp) as EFFECTIVE_DATE,\n      to_date('9999-12-31') as EXPIRA_DATE\n      from table(generator(rowcount => 8401)) /*<< Set to generate 20 years. Modify rowcount to increase or decrease size*/", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_DATE_STG"}, "model.dlh_xero.V_ACCOUNTS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'ACCOUNTS')}}\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(ACCOUNT_ID,'00000000000000000000000000000000')) ) AS K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,ACCOUNT_ID AS K_ACCOUNT_BK\n    --ATTRIBUTES\n    ,BANK_ACCOUNT_NUMBER AS A_BANK_ACCOUNT_NUMBER\n    ,BANK_ACCOUNT_TYPE AS A_BANK_ACCOUNT_TYPE\n    ,CLASS AS A_CLASS\n    ,CODE AS A_CODE\n    ,CURRENCY_CODE AS A_CURRENCY_CODE\n    ,DESCRIPTION AS A_DESCRIPTION\n    ,NAME AS A_NAME\n    ,REPORTING_CODE AS A_REPORTING_CODE\n    ,REPORTING_CODENAME AS A_REPORTING_CODENAME\n    ,STATUS AS A_STATUS\n    ,SYSTEM_ACCOUNT AS A_SYSTEM_ACCOUNT\n    ,TAX_TYPE AS A_TAX_TYPE\n    ,TYPE AS A_TYPE\n    ,UPDATED_DATE_UTC AS A_UPDATED_AT_DTS\n    --BOOLEAN\n    ,ADD_TO_WATCHLIST AS B_ADD_TO_WATCHLIST\n    ,ENABLE_PAYMENTS_TO_ACCOUNT AS B_ENABLE_PAYMENTS_TO_ACCOUNT\n    ,HAS_ATTACHMENTS AS B_HAS_ATTACHMENTS\n    ,SHOW_IN_EXPENSE_CLAIMS AS B_SHOW_IN_EXPENSE_CLAIMS\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n  FROM\n    source  A    \n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.ACCOUNTS"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "ACCOUNTS", "V_ACCOUNTS_STG"], "unique_id": "model.dlh_xero.V_ACCOUNTS_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/ACCOUNTS/V_ACCOUNTS_STG.sql", "original_file_path": "models/staging/ACCOUNTS/V_ACCOUNTS_STG.sql", "name": "V_ACCOUNTS_STG", "alias": "V_ACCOUNTS_STG", "checksum": {"name": "sha256", "checksum": "33f8f4652b4d423ede92072f0b2ec5f0c84189c6593df422eefa193966a9d148"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_XERO", "ACCOUNTS"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/ACCOUNTS/V_ACCOUNTS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"ACCOUNTS\"\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(ACCOUNT_ID,'00000000000000000000000000000000')) ) AS K_ACCOUNT_DLHK\n    --BUSINESS KEYS\n    ,ACCOUNT_ID AS K_ACCOUNT_BK\n    --ATTRIBUTES\n    ,BANK_ACCOUNT_NUMBER AS A_BANK_ACCOUNT_NUMBER\n    ,BANK_ACCOUNT_TYPE AS A_BANK_ACCOUNT_TYPE\n    ,CLASS AS A_CLASS\n    ,CODE AS A_CODE\n    ,CURRENCY_CODE AS A_CURRENCY_CODE\n    ,DESCRIPTION AS A_DESCRIPTION\n    ,NAME AS A_NAME\n    ,REPORTING_CODE AS A_REPORTING_CODE\n    ,REPORTING_CODENAME AS A_REPORTING_CODENAME\n    ,STATUS AS A_STATUS\n    ,SYSTEM_ACCOUNT AS A_SYSTEM_ACCOUNT\n    ,TAX_TYPE AS A_TAX_TYPE\n    ,TYPE AS A_TYPE\n    ,UPDATED_DATE_UTC AS A_UPDATED_AT_DTS\n    --BOOLEAN\n    ,ADD_TO_WATCHLIST AS B_ADD_TO_WATCHLIST\n    ,ENABLE_PAYMENTS_TO_ACCOUNT AS B_ENABLE_PAYMENTS_TO_ACCOUNT\n    ,HAS_ATTACHMENTS AS B_HAS_ATTACHMENTS\n    ,SHOW_IN_EXPENSE_CLAIMS AS B_SHOW_IN_EXPENSE_CLAIMS\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\n  FROM\n    source  A    \n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_ACCOUNTS_STG"}, "model.dlh_xero.V_ITEM_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'ITEM')}}\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_XER_ACCOUNTS_D')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK    \n    MD5( TRIM(COALESCE(S.ITEM_ID,'00000000000000000000000000000000')) ) AS K_ITEM_DLHK\n    ,a_inventory.K_ACCOUNT_DLHK AS K_INVENTORY_ACCOUNT_DLHK\n    ,a_purchase_details_account.K_ACCOUNT_DLHK AS K_PURCHASE_DETAILS_ACCOUNT_DLHK\n    ,a_purchase_details_cogs.K_ACCOUNT_DLHK AS K_PURCHASE_DETAILS_COGS_ACCOUNT_DLHK\n    ,a_sales_details_account.K_ACCOUNT_DLHK AS K_SALES_DETAILS_ACCOUNT_DLHK\n    ,a_sales_details_cogs.K_ACCOUNT_DLHK AS K_SALES_DETAILS_COGS_DLHK\n    --Business Keys\n    ,ITEM_ID AS K_ITEM_BK\n    --ATTRIBUTES\n    ,CODE AS A_CODE\n    ,DESCRIPTION AS A_DESCRIPTION\n    ,INVENTORY_ASSET_ACCOUNT_CODE AS A_INVENTORY_ASSET_ACCOUNT_CODE\n    ,NAME AS A_NAME\n    ,PURCHASE_DESCRIPTION AS A_PURCHASE_DESCRIPTION\n    ,PURCHASE_DETAILS_ACCOUNT_CODE AS A_PURCHASE_DETAILS_ACCOUNT_CODE\n    ,PURCHASE_DETAILS_COGSACCOUNT_CODE AS A_PURCHASE_DETAILS_COGSACCOUNT_CODE\n    ,PURCHASE_DETAILS_TAX_TYPE AS A_PURCHASE_DETAILS_TAX_TYPE\n    ,SALES_DETAILS_ACCOUNT_CODE AS A_SALES_DETAILS_ACCOUNT_CODE\n    ,SALES_DETAILS_COGSACCOUNT_CODE AS A_SALES_DETAILS_COGSACCOUNT_CODE\n    ,SALES_DETAILS_TAX_TYPE AS A_SALES_DETAILS_TAX_TYPE\n    ,UPDATED_DATE_UTC AS A_UPDATED_DATE_UTC\n    --BOOLEAN\n    ,IS_PURCHASED AS B_IS_PURCHASED\n    ,IS_SOLD AS B_IS_SOLD\n    ,IS_TRACKED_AS_INVENTORY AS B_IS_TRACKED_AS_INVENTORY\n    --METRICS\n    ,PURCHASE_DETAILS_UNIT_PRICE::decimal(15,2) AS M_PURCHASE_DETAILS_UNIT_PRICE\n    ,QUANTITY_ON_HAND::decimal(15,2) AS M_QUANTITY_ON_HAND\n    ,SALES_DETAILS_UNIT_PRICE::decimal(15,2) AS M_SALES_DETAILS_UNIT_PRICE\n    ,TOTAL_COST_POOL::decimal(15,2) AS M_TOTAL_COST_POOL\n    --METADATA (MD)\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source S\n    LEFT JOIN account a_inventory ON a_inventory.A_CODE = S.INVENTORY_ASSET_ACCOUNT_CODE\n    LEFT JOIN account a_purchase_details_account ON  a_purchase_details_account.A_CODE = S.PURCHASE_DETAILS_ACCOUNT_CODE\n    LEFT JOIN account a_purchase_details_cogs ON a_purchase_details_cogs.A_CODE = S.PURCHASE_DETAILS_COGSACCOUNT_CODE\n    LEFT JOIN account a_sales_details_account ON a_sales_details_account.A_CODE = S.SALES_DETAILS_ACCOUNT_CODE\n    LEFT JOIN account a_sales_details_cogs ON a_sales_details_cogs.A_CODE = S.SALES_DETAILS_COGSACCOUNT_CODE\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.ITEM", "model.dlh_xero.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "ITEM", "V_ITEM_STG"], "unique_id": "model.dlh_xero.V_ITEM_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/ITEM/V_ITEM_STG.sql", "original_file_path": "models/staging/ITEM/V_ITEM_STG.sql", "name": "V_ITEM_STG", "alias": "V_ITEM_STG", "checksum": {"name": "sha256", "checksum": "91813a0ec1ce845dd443806a98de558525dcb74f0871deb8009f36124f24341f"}, "tags": ["staging", "daily"], "refs": [["W_ACCOUNTS_D"]], "sources": [["DEMO_XERO", "ITEM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/ITEM/V_ITEM_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"ITEM\"\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n),\nrename AS \n(  \nSELECT\n    --DLHK    \n    MD5( TRIM(COALESCE(S.ITEM_ID,'00000000000000000000000000000000')) ) AS K_ITEM_DLHK\n    ,a_inventory.K_ACCOUNT_DLHK AS K_INVENTORY_ACCOUNT_DLHK\n    ,a_purchase_details_account.K_ACCOUNT_DLHK AS K_PURCHASE_DETAILS_ACCOUNT_DLHK\n    ,a_purchase_details_cogs.K_ACCOUNT_DLHK AS K_PURCHASE_DETAILS_COGS_ACCOUNT_DLHK\n    ,a_sales_details_account.K_ACCOUNT_DLHK AS K_SALES_DETAILS_ACCOUNT_DLHK\n    ,a_sales_details_cogs.K_ACCOUNT_DLHK AS K_SALES_DETAILS_COGS_DLHK\n    --Business Keys\n    ,ITEM_ID AS K_ITEM_BK\n    --ATTRIBUTES\n    ,CODE AS A_CODE\n    ,DESCRIPTION AS A_DESCRIPTION\n    ,INVENTORY_ASSET_ACCOUNT_CODE AS A_INVENTORY_ASSET_ACCOUNT_CODE\n    ,NAME AS A_NAME\n    ,PURCHASE_DESCRIPTION AS A_PURCHASE_DESCRIPTION\n    ,PURCHASE_DETAILS_ACCOUNT_CODE AS A_PURCHASE_DETAILS_ACCOUNT_CODE\n    ,PURCHASE_DETAILS_COGSACCOUNT_CODE AS A_PURCHASE_DETAILS_COGSACCOUNT_CODE\n    ,PURCHASE_DETAILS_TAX_TYPE AS A_PURCHASE_DETAILS_TAX_TYPE\n    ,SALES_DETAILS_ACCOUNT_CODE AS A_SALES_DETAILS_ACCOUNT_CODE\n    ,SALES_DETAILS_COGSACCOUNT_CODE AS A_SALES_DETAILS_COGSACCOUNT_CODE\n    ,SALES_DETAILS_TAX_TYPE AS A_SALES_DETAILS_TAX_TYPE\n    ,UPDATED_DATE_UTC AS A_UPDATED_DATE_UTC\n    --BOOLEAN\n    ,IS_PURCHASED AS B_IS_PURCHASED\n    ,IS_SOLD AS B_IS_SOLD\n    ,IS_TRACKED_AS_INVENTORY AS B_IS_TRACKED_AS_INVENTORY\n    --METRICS\n    ,PURCHASE_DETAILS_UNIT_PRICE::decimal(15,2) AS M_PURCHASE_DETAILS_UNIT_PRICE\n    ,QUANTITY_ON_HAND::decimal(15,2) AS M_QUANTITY_ON_HAND\n    ,SALES_DETAILS_UNIT_PRICE::decimal(15,2) AS M_SALES_DETAILS_UNIT_PRICE\n    ,TOTAL_COST_POOL::decimal(15,2) AS M_TOTAL_COST_POOL\n    --METADATA (MD)\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    source S\n    LEFT JOIN account a_inventory ON a_inventory.A_CODE = S.INVENTORY_ASSET_ACCOUNT_CODE\n    LEFT JOIN account a_purchase_details_account ON  a_purchase_details_account.A_CODE = S.PURCHASE_DETAILS_ACCOUNT_CODE\n    LEFT JOIN account a_purchase_details_cogs ON a_purchase_details_cogs.A_CODE = S.PURCHASE_DETAILS_COGSACCOUNT_CODE\n    LEFT JOIN account a_sales_details_account ON a_sales_details_account.A_CODE = S.SALES_DETAILS_ACCOUNT_CODE\n    LEFT JOIN account a_sales_details_cogs ON a_sales_details_cogs.A_CODE = S.SALES_DETAILS_COGSACCOUNT_CODE\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_ITEM_STG"}, "model.dlh_xero.V_BRANDING_THEME_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'BRANDING_THEME')}}\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.BRANDING_THEME_ID,'00000000000000000000000000000000')) ) AS K_BRANDING_THEME_DLHK    \n    --BUSINESS KEYS\n    ,A.BRANDING_THEME_ID AS K_BRANDING_THEME_BK    \n    --ATTRIBUTES\n    ,A.NAME AS A_BRANDING_THEME_NAME\n    ,A.SORT_ORDER AS A_SORT_ORDER\n    ,A.CREATED_DATE_UTC AS A_CREATED_AT_DTS    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n  FROM\n    source  A    \n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.BRANDING_THEME"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "BRANDING_THEME", "V_BRANDING_THEME_STG"], "unique_id": "model.dlh_xero.V_BRANDING_THEME_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/BRANDING_THEME/V_BRANDING_THEME_STG.sql", "original_file_path": "models/staging/BRANDING_THEME/V_BRANDING_THEME_STG.sql", "name": "V_BRANDING_THEME_STG", "alias": "V_BRANDING_THEME_STG", "checksum": {"name": "sha256", "checksum": "f814fcdcf302f995f52c2b94efc2a48cdb174f7842981f21cead1c7a195a3f34"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_XERO", "BRANDING_THEME"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/BRANDING_THEME/V_BRANDING_THEME_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"BRANDING_THEME\"\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.BRANDING_THEME_ID,'00000000000000000000000000000000')) ) AS K_BRANDING_THEME_DLHK    \n    --BUSINESS KEYS\n    ,A.BRANDING_THEME_ID AS K_BRANDING_THEME_BK    \n    --ATTRIBUTES\n    ,A.NAME AS A_BRANDING_THEME_NAME\n    ,A.SORT_ORDER AS A_SORT_ORDER\n    ,A.CREATED_DATE_UTC AS A_CREATED_AT_DTS    \n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\n  FROM\n    source  A    \n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_BRANDING_THEME_STG"}, "model.dlh_xero.V_ASSETS_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'ASSET')}}\n),\nasset_type AS (\n  SELECT\n  *\n  FROM\n    {{source(var('source_schema'),'ASSET_TYPE')}}\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.ASSET_ID,'00000000000000000000000000000000')) ) AS K_ASSET_DLHK\n    ,MD5( TRIM(COALESCE(A.ASSET_TYPE_ID,'00000000000000000000000000000000')) ) AS K_ASSET_TYPE_DLHK\n    --BUSINESS KEYS\n    ,A.ASSET_ID AS K_ASSET_BK\n    ,A.ASSET_TYPE_ID AS K_ASSET_TYPE_BK\n    ,A.DEPRECIATION_BOOK_EFFECTIVE_DATE_OF_CHANGE_ID AS K_DEPRECIATION_BOOK_EFFECTIVE_DATE_OF_CHANGE_BK\n    ,A.DEPRECIATION_OBJECT_ID AS K_DEPRECIATION_OBJECT_BK\n    --ATTRIBUTES\n    ,A.ASSET_NAME AS A_ASSET_NAME\n    ,A.ASSET_NUMBER AS A_ASSET_NUMBER\n    ,A.ASSET_STATUS AS A_ASSET_STATUS\n    ,A.CURRENT_ACCUM_DEPRECIATION_AMOUNT AS A_CURRENT_ACCUM_DEPRECIATION_AMOUNT\n    ,A.DEPRECIATION_AVERAGING_METHOD AS A_DEPRECIATION_AVERAGING_METHOD\n    ,A.DEPRECIATION_CALCULATION_METHOD AS A_DEPRECIATION_CALCULATION_METHOD    \n    ,A.DEPRECIATION_EFFECTIVE_FROM_DATE AS A_DEPRECIATION_EFFECTIVE_FROM_DATE\n    ,A.DEPRECIATION_METHOD AS A_DEPRECIATION_METHOD\n    ,A.DEPRECIATION_OBJECT_TYPE AS A_DEPRECIATION_OBJECT_TYPE\n    ,A.DEPRECIATION_RATE AS A_DEPRECIATION_RATE\n    ,A.DEPRECIATION_START_DATE AS A_DEPRECIATION_START_DATE\n    ,A.DESCRIPTION AS A_DESCRIPTION\n    ,A.DISPOSAL_DATE AS A_DISPOSAL_DATE\n    ,A.DISPOSAL_PRICE AS A_DISPOSAL_PRICE    \n    ,A.PURCHASE_DATE AS A_PURCHASE_DATE    \n    ,A.SERIAL_NUMBER AS A_SERIAL_NUMBER\n    ,A.WARRANTY_EXPIRY_DATE AS A_WARRANTY_EXPIRY_DATE\n    ,T.ASSET_TYPE_NAME AS A_ASSET_TYPE_NAME\n    ,T.DEPRECIATION_METHOD AS A_ASSET_TYPE_DEPRECIATION_METHOD    \n    --BOOLEAN\n    ,A.CAN_ROLLBACK AS B_CAN_ROLLBACK\n    ,A.IS_DELETE_ENABLED_FOR_DATE AS B_IS_DELETE_ENABLED_FOR_DATE\n    --METRICS\n    ,A.DEPRECIATION_CURRENT_CAPITAL_GAIN::DECIMAL(15,2) AS M_DEPRECIATION_CURRENT_CAPITAL_GAIN\n    ,A.DEPRECIATION_CURRENT_GAIN_LOSS::DECIMAL(15,2) AS M_DEPRECIATION_CURRENT_GAIN_LOSS\n    ,A.ACCOUNTING_BOOK_VALUE::DECIMAL(15,2) AS M_ACCOUNTING_BOOK_VALUE\n    ,A.DEPRECIATION_EFFECTIVE_LIFE_YEARS::DECIMAL(15,2) AS M_DEPRECIATION_EFFECTIVE_LIFE_YEARS\n    ,A.PRIOR_ACCUM_DEPRECIATION_AMOUNT::DECIMAL(15,2) AS M_PRIOR_ACCUM_DEPRECIATION_AMOUNT\n    ,A.PURCHASE_PRICE::DECIMAL(15,2) AS M_PURCHASE_PRICE\n    ,T.DEPRECIATION_RATE AS M_ASSET_TYPE_DEPRECIATION_RATE\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n  FROM\n    source  A\n    LEFT JOIN asset_type T ON T.ASSET_TYPE_ID = A.ASSET_TYPE_ID\n)\n\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.ASSET", "source.dlh_xero.DEMO_XERO.ASSET_TYPE"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "ASSETS", "V_ASSETS_STG"], "unique_id": "model.dlh_xero.V_ASSETS_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/ASSETS/V_ASSETS_STG.sql", "original_file_path": "models/staging/ASSETS/V_ASSETS_STG.sql", "name": "V_ASSETS_STG", "alias": "V_ASSETS_STG", "checksum": {"name": "sha256", "checksum": "b6e25e2c650a933600c72ad67f2f296a404cc1cc2651cd887fb2ba8167e85627"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_XERO", "ASSET"], ["DEMO_XERO", "ASSET_TYPE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/ASSETS/V_ASSETS_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"ASSET\"\n),\nasset_type AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DEMO_XERO.\"ASSET_TYPE\"\n),\nrename AS \n(   \nSELECT \n    --MD5\n    MD5( TRIM(COALESCE(A.ASSET_ID,'00000000000000000000000000000000')) ) AS K_ASSET_DLHK\n    ,MD5( TRIM(COALESCE(A.ASSET_TYPE_ID,'00000000000000000000000000000000')) ) AS K_ASSET_TYPE_DLHK\n    --BUSINESS KEYS\n    ,A.ASSET_ID AS K_ASSET_BK\n    ,A.ASSET_TYPE_ID AS K_ASSET_TYPE_BK\n    ,A.DEPRECIATION_BOOK_EFFECTIVE_DATE_OF_CHANGE_ID AS K_DEPRECIATION_BOOK_EFFECTIVE_DATE_OF_CHANGE_BK\n    ,A.DEPRECIATION_OBJECT_ID AS K_DEPRECIATION_OBJECT_BK\n    --ATTRIBUTES\n    ,A.ASSET_NAME AS A_ASSET_NAME\n    ,A.ASSET_NUMBER AS A_ASSET_NUMBER\n    ,A.ASSET_STATUS AS A_ASSET_STATUS\n    ,A.CURRENT_ACCUM_DEPRECIATION_AMOUNT AS A_CURRENT_ACCUM_DEPRECIATION_AMOUNT\n    ,A.DEPRECIATION_AVERAGING_METHOD AS A_DEPRECIATION_AVERAGING_METHOD\n    ,A.DEPRECIATION_CALCULATION_METHOD AS A_DEPRECIATION_CALCULATION_METHOD    \n    ,A.DEPRECIATION_EFFECTIVE_FROM_DATE AS A_DEPRECIATION_EFFECTIVE_FROM_DATE\n    ,A.DEPRECIATION_METHOD AS A_DEPRECIATION_METHOD\n    ,A.DEPRECIATION_OBJECT_TYPE AS A_DEPRECIATION_OBJECT_TYPE\n    ,A.DEPRECIATION_RATE AS A_DEPRECIATION_RATE\n    ,A.DEPRECIATION_START_DATE AS A_DEPRECIATION_START_DATE\n    ,A.DESCRIPTION AS A_DESCRIPTION\n    ,A.DISPOSAL_DATE AS A_DISPOSAL_DATE\n    ,A.DISPOSAL_PRICE AS A_DISPOSAL_PRICE    \n    ,A.PURCHASE_DATE AS A_PURCHASE_DATE    \n    ,A.SERIAL_NUMBER AS A_SERIAL_NUMBER\n    ,A.WARRANTY_EXPIRY_DATE AS A_WARRANTY_EXPIRY_DATE\n    ,T.ASSET_TYPE_NAME AS A_ASSET_TYPE_NAME\n    ,T.DEPRECIATION_METHOD AS A_ASSET_TYPE_DEPRECIATION_METHOD    \n    --BOOLEAN\n    ,A.CAN_ROLLBACK AS B_CAN_ROLLBACK\n    ,A.IS_DELETE_ENABLED_FOR_DATE AS B_IS_DELETE_ENABLED_FOR_DATE\n    --METRICS\n    ,A.DEPRECIATION_CURRENT_CAPITAL_GAIN::DECIMAL(15,2) AS M_DEPRECIATION_CURRENT_CAPITAL_GAIN\n    ,A.DEPRECIATION_CURRENT_GAIN_LOSS::DECIMAL(15,2) AS M_DEPRECIATION_CURRENT_GAIN_LOSS\n    ,A.ACCOUNTING_BOOK_VALUE::DECIMAL(15,2) AS M_ACCOUNTING_BOOK_VALUE\n    ,A.DEPRECIATION_EFFECTIVE_LIFE_YEARS::DECIMAL(15,2) AS M_DEPRECIATION_EFFECTIVE_LIFE_YEARS\n    ,A.PRIOR_ACCUM_DEPRECIATION_AMOUNT::DECIMAL(15,2) AS M_PRIOR_ACCUM_DEPRECIATION_AMOUNT\n    ,A.PURCHASE_PRICE::DECIMAL(15,2) AS M_PURCHASE_PRICE\n    ,T.DEPRECIATION_RATE AS M_ASSET_TYPE_DEPRECIATION_RATE\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\n  FROM\n    source  A\n    LEFT JOIN asset_type T ON T.ASSET_TYPE_ID = A.ASSET_TYPE_ID\n)\n\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_ASSETS_STG"}, "model.dlh_xero.V_INVOICE_LINE_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'INVOICE_LINE_ITEM')}}\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_XER_ACCOUNTS_D')}}\n),\nitem AS (\n  SELECT \n  * \n  FROM  \t\n     {{ref('W_XER_ITEMS_D')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.LINE_ITEM_ID,'00000000000000000000000000000000')) ) AS K_INVOICE_LINE_DLHK\n    ,MD5( TRIM(COALESCE(S.INVOICE_ID,'00000000000000000000000000000000')) ) AS K_INVOICE_DLHK\n    ,A.K_ACCOUNT_DLHK\n    ,I.K_ITEM_DLHK\n    --BUSINESS KEYS\n    ,S.INVOICE_ID AS K_INVOICE_BK\n    ,S.LINE_ITEM_ID AS K_INVOICE_LINE_BK\n    --ATTRIBUTES\n    ,S.ACCOUNT_CODE AS A_ACCOUNT_CODE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.ITEM_CODE AS A_ITEM_CODE\n    ,S.TAX_TYPE AS A_TAX_TYPE\n    ,S.VALIDATION_ERRORS AS A_VALIDATION_ERRORS\n    --BOOLEAN\n    ,S.DISCOUNT_ENTERED_AS_PERCENT AS B_DISCOUNT_ENTERED_AS_PERCENT\n    --METRICS    \n    ,S.DISCOUNT_RATE::DECIMAL(15,2) AS M_DISCOUNT_RATE\n    ,S.LINE_AMOUNT::DECIMAL(15,2) AS M_LINE_AMOUNT\n    ,S.QUANTITY::DECIMAL(15,2) AS M_QUANTITY\n    ,S.TAX_AMOUNT::DECIMAL(15,2) AS M_TAX_AMOUNT\n    ,S.UNIT_AMOUNT::DECIMAL(15,2) AS M_UNIT_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\n\nFROM\n    source S\n    LEFT JOIN account A on A.A_CODE = S.ACCOUNT_CODE\n    LEFT JOIN item I ON I.A_CODE = S.ITEM_CODE\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM", "model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "INVOICE", "V_INVOICE_LINE_STG"], "unique_id": "model.dlh_xero.V_INVOICE_LINE_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/INVOICE/V_INVOICE_LINE_STG.sql", "original_file_path": "models/staging/INVOICE/V_INVOICE_LINE_STG.sql", "name": "V_INVOICE_LINE_STG", "alias": "V_INVOICE_LINE_STG", "checksum": {"name": "sha256", "checksum": "26491c7e674afe353510a88c6edba0cf77cda4cce664159dcca0afa11ce19028"}, "tags": ["staging", "daily"], "refs": [["W_ACCOUNTS_D"], ["W_ITEMS_D"]], "sources": [["DEMO_XERO", "INVOICE_LINE_ITEM"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/INVOICE/V_INVOICE_LINE_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"INVOICE_LINE_ITEM\"\n),\naccount AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n),\nitem AS (\n  SELECT \n  * \n  FROM  \t\n     DEVELOPER_SANDBOX.DBT_XERO.W_ITEMS_D\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.LINE_ITEM_ID,'00000000000000000000000000000000')) ) AS K_INVOICE_LINE_DLHK\n    ,MD5( TRIM(COALESCE(S.INVOICE_ID,'00000000000000000000000000000000')) ) AS K_INVOICE_DLHK\n    ,A.K_ACCOUNT_DLHK\n    ,I.K_ITEM_DLHK\n    --BUSINESS KEYS\n    ,S.INVOICE_ID AS K_INVOICE_BK\n    ,S.LINE_ITEM_ID AS K_INVOICE_LINE_BK\n    --ATTRIBUTES\n    ,S.ACCOUNT_CODE AS A_ACCOUNT_CODE\n    ,S.DESCRIPTION AS A_DESCRIPTION\n    ,S.ITEM_CODE AS A_ITEM_CODE\n    ,S.TAX_TYPE AS A_TAX_TYPE\n    ,S.VALIDATION_ERRORS AS A_VALIDATION_ERRORS\n    --BOOLEAN\n    ,S.DISCOUNT_ENTERED_AS_PERCENT AS B_DISCOUNT_ENTERED_AS_PERCENT\n    --METRICS    \n    ,S.DISCOUNT_RATE::DECIMAL(15,2) AS M_DISCOUNT_RATE\n    ,S.LINE_AMOUNT::DECIMAL(15,2) AS M_LINE_AMOUNT\n    ,S.QUANTITY::DECIMAL(15,2) AS M_QUANTITY\n    ,S.TAX_AMOUNT::DECIMAL(15,2) AS M_TAX_AMOUNT\n    ,S.UNIT_AMOUNT::DECIMAL(15,2) AS M_UNIT_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\n\nFROM\n    source S\n    LEFT JOIN account A on A.A_CODE = S.ACCOUNT_CODE\n    LEFT JOIN item I ON I.A_CODE = S.ITEM_CODE\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_INVOICE_LINE_STG"}, "model.dlh_xero.V_INVOICE_HEADER_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'INVOICE')}}\n),\ncontacts AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('W_XER_CONTACTS_D')}}\n),\nbranding_theme AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('V_XER_BRANDING_THEME_STG')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.INVOICE_ID,'00000000000000000000000000000000')) ) AS K_INVOICE_DLHK\n    ,C.K_CONTACT_DLHK\n    ,B.K_BRANDING_THEME_DLHK\n    --BUSINESS KEYS\n    ,S.BRANDING_THEME_ID AS K_BRANDING_THEME_BK\n    ,S.CONTACT_ID AS K_CONTACT_BK    \n    ,S.INVOICE_ID AS K_INVOICE_BK\n    --ATTRIBUTES\n    ,B.A_BRANDING_THEME_NAME  \n    ,S.CURRENCY_CODE AS A_CURRENCY_CODE\n    ,S.DUE_DATE AS A_DUE_DATE\n    ,S.EXPECTED_PAYMENT_DATE AS A_EXPECTED_PAYMENT_DATE\n    ,S.INVOICE_NUMBER AS A_INVOICE_NUMBER\n    ,S.INV_DATE AS A_INV_DATE\n    ,S.LINE_AMOUNT_TYPES AS A_LINE_AMOUNT_TYPES\n    ,S.PLANNED_PAYMENT_DATE AS A_PLANNED_PAYMENT_DATE\n    ,S.REFERENCE AS A_REFERENCE\n    ,S.STATUS AS A_STATUS\n    ,S.TYPE AS A_TYPE\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_DATE_DTS\n    ,S.URL AS A_URL\n    ,S.FULLY_PAID_ON_DATE AS A_FULLY_PAID_ON_DATE\n    --BOOLEANS\n    ,S.HAS_ATTACHMENTS AS B_HAS_ATTACHMENTS\n    ,S.HAS_ERRORS AS B_HAS_ERRORS\n    ,S.IS_DISCOUNTED AS B_IS_DISCOUNTED\n    ,S.SENT_TO_CONTACT AS B_SENT_TO_CONTACT\n    --METRICS\n    ,S.AMOUNT_PAID::DECIMAL(15,2) AS M_AMOUNT_PAID\n    ,S.AMOUNT_CREDITED::DECIMAL(15,2) AS M_AMOUNT_CREDITED\n    ,S.AMOUNT_DUE::DECIMAL(15,2) AS M_AMOUNT_DUE\n    ,S.CISDEDUCTION::DECIMAL(15,2) AS M_CISDEDUCTION\n    ,S.CURRENCY_RATE::DECIMAL(15,2) AS M_CURRENCY_RATE\n    ,S.SUB_TOTAL::DECIMAL(15,2) AS M_SUB_TOTAL\n    ,S.TOTAL::DECIMAL(15,2) AS M_TOTAL\n    ,S.TOTAL_TAX::DECIMAL(15,2) AS M_TOTAL_TAX\n\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source S\n    left join contacts C on C.K_CONTACT_BK = S.CONTACT_ID\n    left join branding_theme B ON B.K_BRANDING_THEME_BK = S.BRANDING_THEME_ID\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dlh_xero.DEMO_XERO.INVOICE", "model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.V_BRANDING_THEME_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "INVOICE", "V_INVOICE_HEADER_STG"], "unique_id": "model.dlh_xero.V_INVOICE_HEADER_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/INVOICE/V_INVOICE_HEADER_STG.sql", "original_file_path": "models/staging/INVOICE/V_INVOICE_HEADER_STG.sql", "name": "V_INVOICE_HEADER_STG", "alias": "V_INVOICE_HEADER_STG", "checksum": {"name": "sha256", "checksum": "c8a382374a3cd4050f1afc15ad8b4bb6119db68455a519d2788a742a7130c274"}, "tags": ["staging", "daily"], "refs": [["W_CONTACTS_D"], ["V_BRANDING_THEME_STG"]], "sources": [["DEMO_XERO", "INVOICE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/INVOICE/V_INVOICE_HEADER_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"INVOICE\"\n),\ncontacts AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D\n),\nbranding_theme AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.V_BRANDING_THEME_STG\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    MD5( TRIM(COALESCE(S.INVOICE_ID,'00000000000000000000000000000000')) ) AS K_INVOICE_DLHK\n    ,C.K_CONTACT_DLHK\n    ,B.K_BRANDING_THEME_DLHK\n    --BUSINESS KEYS\n    ,S.BRANDING_THEME_ID AS K_BRANDING_THEME_BK\n    ,S.CONTACT_ID AS K_CONTACT_BK    \n    ,S.INVOICE_ID AS K_INVOICE_BK\n    --ATTRIBUTES\n    ,B.A_BRANDING_THEME_NAME  \n    ,S.CURRENCY_CODE AS A_CURRENCY_CODE\n    ,S.DUE_DATE AS A_DUE_DATE\n    ,S.EXPECTED_PAYMENT_DATE AS A_EXPECTED_PAYMENT_DATE\n    ,S.INVOICE_NUMBER AS A_INVOICE_NUMBER\n    ,S.INV_DATE AS A_INV_DATE\n    ,S.LINE_AMOUNT_TYPES AS A_LINE_AMOUNT_TYPES\n    ,S.PLANNED_PAYMENT_DATE AS A_PLANNED_PAYMENT_DATE\n    ,S.REFERENCE AS A_REFERENCE\n    ,S.STATUS AS A_STATUS\n    ,S.TYPE AS A_TYPE\n    ,S.UPDATED_DATE_UTC AS A_UPDATED_DATE_DTS\n    ,S.URL AS A_URL\n    ,S.FULLY_PAID_ON_DATE AS A_FULLY_PAID_ON_DATE\n    --BOOLEANS\n    ,S.HAS_ATTACHMENTS AS B_HAS_ATTACHMENTS\n    ,S.HAS_ERRORS AS B_HAS_ERRORS\n    ,S.IS_DISCOUNTED AS B_IS_DISCOUNTED\n    ,S.SENT_TO_CONTACT AS B_SENT_TO_CONTACT\n    --METRICS\n    ,S.AMOUNT_PAID::DECIMAL(15,2) AS M_AMOUNT_PAID\n    ,S.AMOUNT_CREDITED::DECIMAL(15,2) AS M_AMOUNT_CREDITED\n    ,S.AMOUNT_DUE::DECIMAL(15,2) AS M_AMOUNT_DUE\n    ,S.CISDEDUCTION::DECIMAL(15,2) AS M_CISDEDUCTION\n    ,S.CURRENCY_RATE::DECIMAL(15,2) AS M_CURRENCY_RATE\n    ,S.SUB_TOTAL::DECIMAL(15,2) AS M_SUB_TOTAL\n    ,S.TOTAL::DECIMAL(15,2) AS M_TOTAL\n    ,S.TOTAL_TAX::DECIMAL(15,2) AS M_TOTAL_TAX\n\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    source S\n    left join contacts C on C.K_CONTACT_BK = S.CONTACT_ID\n    left join branding_theme B ON B.K_BRANDING_THEME_BK = S.BRANDING_THEME_ID\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_INVOICE_HEADER_STG"}, "model.dlh_xero.V_INVOICES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH INVOICE_HEADER AS (\n  SELECT \n  * \n  FROM  \t\n    {{ref('V_XER_INVOICE_HEADER_STG')}}\n),\nINVOICE_LINE AS (\n  SELECT\n  *\n  FROM\n    {{ref('V_XER_INVOICE_LINE_STG')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    IL.K_INVOICE_LINE_DLHK\n    ,S.K_INVOICE_DLHK\n    ,S.K_CONTACT_DLHK\n    ,S.K_BRANDING_THEME_DLHK\n    ,IL.K_ACCOUNT_DLHK\n    ,IL.K_ITEM_DLHK\n    --BUSINESS KEYS\n    ,IL.K_INVOICE_LINE_BK\n    ,S.K_INVOICE_BK\n    ,S.K_BRANDING_THEME_BK\n    ,S.K_CONTACT_BK        \n    --ATTRIBUTES\n    ,S.A_BRANDING_THEME_NAME  \n    ,S.A_CURRENCY_CODE\n    ,S.A_DUE_DATE\n    ,S.A_EXPECTED_PAYMENT_DATE\n    ,S.A_INVOICE_NUMBER\n    ,S.A_INV_DATE\n    ,S.A_LINE_AMOUNT_TYPES\n    ,S.A_PLANNED_PAYMENT_DATE\n    ,S.A_REFERENCE\n    ,S.A_STATUS\n    ,S.A_TYPE\n    ,S.A_UPDATED_DATE_DTS\n    ,S.A_URL\n    ,S.A_FULLY_PAID_ON_DATE\n    ,IL.A_ACCOUNT_CODE\n    ,IL.A_DESCRIPTION\n    ,IL.A_ITEM_CODE\n    ,IL.A_TAX_TYPE\n    ,IL.A_VALIDATION_ERRORS\n    --BOOLEANS\n    ,S.B_HAS_ATTACHMENTS\n    ,S.B_HAS_ERRORS\n    ,S.B_IS_DISCOUNTED\n    ,S.B_SENT_TO_CONTACT            \n    ,IL.B_DISCOUNT_ENTERED_AS_PERCENT\n    --METRICS    \n    ,IL.M_DISCOUNT_RATE\n    ,IL.M_LINE_AMOUNT\n    ,IL.M_QUANTITY\n    ,IL.M_TAX_AMOUNT\n    ,IL.M_UNIT_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    INVOICE_HEADER S\n    LEFT JOIN INVOICE_LINE IL on IL.K_INVOICE_BK = S.K_INVOICE_BK    \n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_INVOICE_HEADER_STG", "model.dlh_xero.V_INVOICE_LINE_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "INVOICE", "V_INVOICES_STG"], "unique_id": "model.dlh_xero.V_INVOICES_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/INVOICE/V_INVOICES_STG.sql", "original_file_path": "models/staging/INVOICE/V_INVOICES_STG.sql", "name": "V_INVOICES_STG", "alias": "V_INVOICES_STG", "checksum": {"name": "sha256", "checksum": "22a88e5ea67df502c364504e235338e0f0fc0b6f3bd4b34fdf304ada946f1287"}, "tags": ["staging", "daily"], "refs": [["V_INVOICE_HEADER_STG"], ["V_INVOICE_LINE_STG"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/INVOICE/V_INVOICES_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH INVOICE_HEADER AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DBT_XERO.V_INVOICE_HEADER_STG\n),\nINVOICE_LINE AS (\n  SELECT\n  *\n  FROM\n    DEVELOPER_SANDBOX.DBT_XERO.V_INVOICE_LINE_STG\n),\nrename AS \n(  \nSELECT\n    --DLHK\n    IL.K_INVOICE_LINE_DLHK\n    ,S.K_INVOICE_DLHK\n    ,S.K_CONTACT_DLHK\n    ,S.K_BRANDING_THEME_DLHK\n    ,IL.K_ACCOUNT_DLHK\n    ,IL.K_ITEM_DLHK\n    --BUSINESS KEYS\n    ,IL.K_INVOICE_LINE_BK\n    ,S.K_INVOICE_BK\n    ,S.K_BRANDING_THEME_BK\n    ,S.K_CONTACT_BK        \n    --ATTRIBUTES\n    ,S.A_BRANDING_THEME_NAME  \n    ,S.A_CURRENCY_CODE\n    ,S.A_DUE_DATE\n    ,S.A_EXPECTED_PAYMENT_DATE\n    ,S.A_INVOICE_NUMBER\n    ,S.A_INV_DATE\n    ,S.A_LINE_AMOUNT_TYPES\n    ,S.A_PLANNED_PAYMENT_DATE\n    ,S.A_REFERENCE\n    ,S.A_STATUS\n    ,S.A_TYPE\n    ,S.A_UPDATED_DATE_DTS\n    ,S.A_URL\n    ,S.A_FULLY_PAID_ON_DATE\n    ,IL.A_ACCOUNT_CODE\n    ,IL.A_DESCRIPTION\n    ,IL.A_ITEM_CODE\n    ,IL.A_TAX_TYPE\n    ,IL.A_VALIDATION_ERRORS\n    --BOOLEANS\n    ,S.B_HAS_ATTACHMENTS\n    ,S.B_HAS_ERRORS\n    ,S.B_IS_DISCOUNTED\n    ,S.B_SENT_TO_CONTACT            \n    ,IL.B_DISCOUNT_ENTERED_AS_PERCENT\n    --METRICS    \n    ,IL.M_DISCOUNT_RATE\n    ,IL.M_LINE_AMOUNT\n    ,IL.M_QUANTITY\n    ,IL.M_TAX_AMOUNT\n    ,IL.M_UNIT_AMOUNT\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    INVOICE_HEADER S\n    LEFT JOIN INVOICE_LINE IL on IL.K_INVOICE_BK = S.K_INVOICE_BK    \n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_INVOICES_STG"}, "model.dlh_xero.V_EMPLOYEES_STG": {"raw_sql": "{{ config (\n  materialized= 'view',\n  schema= var('target_schema'),\n  tags= [\"staging\",\"daily\"]\n)\n}}\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    {{source(var('source_schema'),'EMPLOYEE')}}\n),\nrename AS \n(  \nSELECT\n    --DLHK    \n    MD5( TRIM(COALESCE(EMPLOYEE_ID,'00000000000000000000000000000000')) ) AS K_EMPLOYEE_DLHK\n    --Business Keys\n    ,EMPLOYEE_ID AS K_EMPLOYEE_BK\n    --ATTRIBUTES\n    ,STATUS AS A_STATUS\n    ,FIRST_NAME AS A_FIRST_NAME\n    ,LAST_NAME AS A_LAST_NAME\n    ,{{full_name('FIRST_NAME', 'LAST_NAME')}} AS A_FULL_NAME\n    ,UPDATED_DATE_UTC AS A_UPDATED_AT_DTS\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'{{invocation_id}}' AS MD_INTGR_ID\nFROM\n    source S\n)\n\nSELECT * FROM rename", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dlh_xero.full_name"], "nodes": ["source.dlh_xero.DEMO_XERO.EMPLOYEE"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "staging", "EMPLOYEES", "V_EMPLOYEES_STG"], "unique_id": "model.dlh_xero.V_EMPLOYEES_STG", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "staging/EMPLOYEES/V_EMPLOYEES_STG.sql", "original_file_path": "models/staging/EMPLOYEES/V_EMPLOYEES_STG.sql", "name": "V_EMPLOYEES_STG", "alias": "V_EMPLOYEES_STG", "checksum": {"name": "sha256", "checksum": "3c87349e6feead00a4bb7dfa63a548916e5323cec6a5f1cf9cc13bd7ac9bb29f"}, "tags": ["staging", "daily"], "refs": [], "sources": [["DEMO_XERO", "EMPLOYEE"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/staging/EMPLOYEES/V_EMPLOYEES_STG.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "view", "schema": "XERO", "tags": ["staging", "daily"]}, "created_at": 1647989372, "compiled_sql": "\n\nWITH source AS (\n  SELECT \n  * \n  FROM  \t\n    DEVELOPER_SANDBOX.DEMO_XERO.\"EMPLOYEE\"\n),\nrename AS \n(  \nSELECT\n    --DLHK    \n    MD5( TRIM(COALESCE(EMPLOYEE_ID,'00000000000000000000000000000000')) ) AS K_EMPLOYEE_DLHK\n    --Business Keys\n    ,EMPLOYEE_ID AS K_EMPLOYEE_BK\n    --ATTRIBUTES\n    ,STATUS AS A_STATUS\n    ,FIRST_NAME AS A_FIRST_NAME\n    ,LAST_NAME AS A_LAST_NAME\n    ,\n    (COALESCE(FIRST_NAME,'') || COALESCE(LAST_NAME,''))\n AS A_FULL_NAME\n    ,UPDATED_DATE_UTC AS A_UPDATED_AT_DTS\n    --METADATA\n    ,CURRENT_TIMESTAMP as MD_LOAD_DTS\n    ,'8ccc9f73-4570-4d02-a73a-f2045e582801' AS MD_INTGR_ID\nFROM\n    source S\n)\n\nSELECT * FROM rename", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.V_EMPLOYEES_STG"}, "model.dlh_xero.W_ITEMS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_ITEM_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_ITEM_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_ITEMS_D"], "unique_id": "model.dlh_xero.W_ITEMS_D", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_ITEMS_D.sql", "original_file_path": "models/master/W_ITEMS_D.sql", "name": "W_ITEMS_D", "alias": "W_ITEMS_D", "checksum": {"name": "sha256", "checksum": "88c100649df2c7bbace47bf4d7599d5b0a5ca78db86280806d87e20e3e948790"}, "tags": ["staging", "daily"], "refs": [["V_ITEM_STG"]], "sources": [], "description": "This is the items dimension table", "columns": {"K_ITEM_DLHK": {"name": "K_ITEM_DLHK", "description": "DataLakeHouse key of the item", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_ITEMS_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_ITEM_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_ITEMS_D"}, "model.dlh_xero.W_ACCOUNTS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_ACCOUNTS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_ACCOUNTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_ACCOUNTS_D"], "unique_id": "model.dlh_xero.W_ACCOUNTS_D", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_ACCOUNTS_D.sql", "original_file_path": "models/master/W_ACCOUNTS_D.sql", "name": "W_ACCOUNTS_D", "alias": "W_ACCOUNTS_D", "checksum": {"name": "sha256", "checksum": "2226562c87fb4d746ca2da097b00c2fd882ba24f7de349edf8c1caa047c4e2ef"}, "tags": ["staging", "daily"], "refs": [["V_ACCOUNTS_STG"]], "sources": [], "description": "This is the acounts dimension table", "columns": {"K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "DataLakeHouse key of the account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_ACCOUNTS_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_ACCOUNTS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D"}, "model.dlh_xero.W_DATE_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\nSELECT \n\tCAST(DATE_KEY AS NUMBER(9)) AS K_DATE_INTEGER_BK\n\t,CAST(DATE_COLUMN AS DATE) AS K_DATE_BK\n\t,CAST(FULL_DATE_DESC AS VARCHAR(64)) AS A_FULL_DATE_DESC\n\t,CAST(DAY_NUM_IN_WEEK AS NUMBER(1)) AS A_DAY_NUM_IN_WEEK\n\t,CAST(DAY_NUM_IN_MONTH AS NUMBER(2)) AS A_DAY_NUM_IN_MONTH\n\t,CAST(DAY_NUM_IN_YEAR AS NUMBER(3)) AS A_DAY_NUM_IN_YEAR\n\t,CAST(DAY_NAME AS VARCHAR(10)) AS A_DAY_NAME\n\t,CAST(DAY_ABBREV AS VARCHAR(3)) AS A_DAY_ABBREV\n\t,CAST(WEEKDAY_IND AS VARCHAR(64)) AS A_WEEKDAY_IND\n\t,CAST(US_HOLIDAY_IND AS VARCHAR(64)) AS A_US_HOLIDAY_IND\n\t,CAST(COMPANY_HOLIDAY_IND AS VARCHAR(64)) AS A_COMPANY_HOLIDAY_IND\n\t,CAST(MONTH_END_IND AS VARCHAR(64)) AS A_MONTH_END_IND\n\t,CAST(WEEK_BEGIN_DATE_NKEY AS NUMBER(9)) AS A_WEEK_BEGIN_DATE_NKEY\n\t,CAST(WEEK_BEGIN_DATE AS DATE) AS A_WEEK_BEGIN_DATE\n\t,CAST(WEEK_END_DATE_NKEY AS NUMBER(9)) AS A_WEEK_END_DATE_NKEY\n\t,CAST(WEEK_END_DATE AS DATE) AS A_WEEK_END_DATE\n\t,CAST(WEEK_NUM_IN_YEAR AS NUMBER(9)) AS A_WEEK_NUM_IN_YEAR\n\t,CAST(MONTH_NAME AS VARCHAR(10)) AS A_MONTH_NAME\n\t,CAST(MONTH_ABBREV AS VARCHAR(3)) AS A_MONTH_ABBREV\n\t,CAST(MONTH_NUM_IN_YEAR AS NUMBER(2)) AS A_MONTH_NUM_IN_YEAR\n\t,CAST(YEARMONTH AS VARCHAR(10)) AS A_YEARMONTH\n\t,CAST(CURRENT_QUARTER AS NUMBER(1)) AS A_QUARTER\n\t,CAST(YEARQUARTER AS VARCHAR(10)) AS A_YEARQUARTER\n\t,CAST(CURRENT_YEAR AS NUMBER(5)) AS A_YEAR\n\t,CAST(FISCAL_WEEK_NUM AS NUMBER(2)) AS A_FISCAL_WEEK_NUM\n\t,CAST(FISCAL_MONTH_NUM AS NUMBER(2)) AS A_FISCAL_MONTH_NUM\n\t,CAST(FISCAL_YEARMONTH AS VARCHAR(10)) AS A_FISCAL_YEARMONTH\n\t,CAST(FISCAL_QUARTER AS NUMBER(1)) AS A_FISCAL_QUARTER\n\t,CAST(FISCAL_YEARQUARTER AS VARCHAR(10)) AS A_FISCAL_YEARQUARTER\n\t,CAST(FISCAL_HALFYEAR AS NUMBER(1)) AS A_FISCAL_HALFYEAR\n\t,CAST(FISCAL_YEAR AS NUMBER(5)) AS A_FISCAL_YEAR\n\t,CAST(SQL_TIMESTAMP AS TIMESTAMP_NTZ) AS A_SQL_TIMESTAMP_DTS\n\t,CAST(CURRENT_ROW_IND AS CHAR(1)) AS A_CURRENT_ROW_IND\n\t,CAST(EFFECTIVE_DATE AS DATE) AS A_EFFECTIVE_DATE\n\t,CAST(EXPIRA_DATE AS DATE) AS A_EXPIRATION_DATE\nFROM\n{{ref('V_XER_DATE_STG')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_DATE_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_DATE_D"], "unique_id": "model.dlh_xero.W_DATE_D", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_DATE_D.sql", "original_file_path": "models/master/W_DATE_D.sql", "name": "W_DATE_D", "alias": "W_DATE_D", "checksum": {"name": "sha256", "checksum": "2b63ffc08a5065c5d6f5277c8a1bcad6f3973dffd9c0efe2722d7b1b37f6343c"}, "tags": ["staging", "daily"], "refs": [["V_DATE_STG"]], "sources": [], "description": "This is the date dimension table", "columns": {"K_DATE_BK": {"name": "K_DATE_BK", "description": "Date Key", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_DATE_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\nSELECT \n\tCAST(DATE_KEY AS NUMBER(9)) AS K_DATE_INTEGER_BK\n\t,CAST(DATE_COLUMN AS DATE) AS K_DATE_BK\n\t,CAST(FULL_DATE_DESC AS VARCHAR(64)) AS A_FULL_DATE_DESC\n\t,CAST(DAY_NUM_IN_WEEK AS NUMBER(1)) AS A_DAY_NUM_IN_WEEK\n\t,CAST(DAY_NUM_IN_MONTH AS NUMBER(2)) AS A_DAY_NUM_IN_MONTH\n\t,CAST(DAY_NUM_IN_YEAR AS NUMBER(3)) AS A_DAY_NUM_IN_YEAR\n\t,CAST(DAY_NAME AS VARCHAR(10)) AS A_DAY_NAME\n\t,CAST(DAY_ABBREV AS VARCHAR(3)) AS A_DAY_ABBREV\n\t,CAST(WEEKDAY_IND AS VARCHAR(64)) AS A_WEEKDAY_IND\n\t,CAST(US_HOLIDAY_IND AS VARCHAR(64)) AS A_US_HOLIDAY_IND\n\t,CAST(COMPANY_HOLIDAY_IND AS VARCHAR(64)) AS A_COMPANY_HOLIDAY_IND\n\t,CAST(MONTH_END_IND AS VARCHAR(64)) AS A_MONTH_END_IND\n\t,CAST(WEEK_BEGIN_DATE_NKEY AS NUMBER(9)) AS A_WEEK_BEGIN_DATE_NKEY\n\t,CAST(WEEK_BEGIN_DATE AS DATE) AS A_WEEK_BEGIN_DATE\n\t,CAST(WEEK_END_DATE_NKEY AS NUMBER(9)) AS A_WEEK_END_DATE_NKEY\n\t,CAST(WEEK_END_DATE AS DATE) AS A_WEEK_END_DATE\n\t,CAST(WEEK_NUM_IN_YEAR AS NUMBER(9)) AS A_WEEK_NUM_IN_YEAR\n\t,CAST(MONTH_NAME AS VARCHAR(10)) AS A_MONTH_NAME\n\t,CAST(MONTH_ABBREV AS VARCHAR(3)) AS A_MONTH_ABBREV\n\t,CAST(MONTH_NUM_IN_YEAR AS NUMBER(2)) AS A_MONTH_NUM_IN_YEAR\n\t,CAST(YEARMONTH AS VARCHAR(10)) AS A_YEARMONTH\n\t,CAST(CURRENT_QUARTER AS NUMBER(1)) AS A_QUARTER\n\t,CAST(YEARQUARTER AS VARCHAR(10)) AS A_YEARQUARTER\n\t,CAST(CURRENT_YEAR AS NUMBER(5)) AS A_YEAR\n\t,CAST(FISCAL_WEEK_NUM AS NUMBER(2)) AS A_FISCAL_WEEK_NUM\n\t,CAST(FISCAL_MONTH_NUM AS NUMBER(2)) AS A_FISCAL_MONTH_NUM\n\t,CAST(FISCAL_YEARMONTH AS VARCHAR(10)) AS A_FISCAL_YEARMONTH\n\t,CAST(FISCAL_QUARTER AS NUMBER(1)) AS A_FISCAL_QUARTER\n\t,CAST(FISCAL_YEARQUARTER AS VARCHAR(10)) AS A_FISCAL_YEARQUARTER\n\t,CAST(FISCAL_HALFYEAR AS NUMBER(1)) AS A_FISCAL_HALFYEAR\n\t,CAST(FISCAL_YEAR AS NUMBER(5)) AS A_FISCAL_YEAR\n\t,CAST(SQL_TIMESTAMP AS TIMESTAMP_NTZ) AS A_SQL_TIMESTAMP_DTS\n\t,CAST(CURRENT_ROW_IND AS CHAR(1)) AS A_CURRENT_ROW_IND\n\t,CAST(EFFECTIVE_DATE AS DATE) AS A_EFFECTIVE_DATE\n\t,CAST(EXPIRA_DATE AS DATE) AS A_EXPIRATION_DATE\nFROM\nDEVELOPER_SANDBOX.DBT_XERO.V_DATE_STG", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_DATE_D"}, "model.dlh_xero.W_EMPLOYEES_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_EMPLOYEES_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_EMPLOYEES_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_EMPLOYEES_D"], "unique_id": "model.dlh_xero.W_EMPLOYEES_D", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_EMPLOYEES_D.sql", "original_file_path": "models/master/W_EMPLOYEES_D.sql", "name": "W_EMPLOYEES_D", "alias": "W_EMPLOYEES_D", "checksum": {"name": "sha256", "checksum": "155565491a49b2c124c43cb7b8960d1dede1dc10c1e8fffd7f73ed4e1fbd9c5f"}, "tags": ["staging", "daily"], "refs": [["V_EMPLOYEES_STG"]], "sources": [], "description": "This is the employees dimension table", "columns": {"K_EMPLOYEE_DLHK": {"name": "K_EMPLOYEE_DLHK", "description": "DataLakeHouse key of the employee", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_EMPLOYEES_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_EMPLOYEES_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_EMPLOYEES_D"}, "model.dlh_xero.W_ASSETS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_ASSETS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_ASSETS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_ASSETS_D"], "unique_id": "model.dlh_xero.W_ASSETS_D", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_ASSETS_D.sql", "original_file_path": "models/master/W_ASSETS_D.sql", "name": "W_ASSETS_D", "alias": "W_ASSETS_D", "checksum": {"name": "sha256", "checksum": "5970f73f45a438fd16c44dca051cb59a7f18c506bd4aee0e14c22f46851ded28"}, "tags": ["staging", "daily"], "refs": [["V_ASSETS_STG"]], "sources": [], "description": "This is the assets dimension table", "columns": {"K_ASSET_DLHK": {"name": "K_ASSET_DLHK", "description": "DataLakeHouse key of the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_ASSETS_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_ASSETS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_ASSETS_D"}, "model.dlh_xero.W_INVOICES_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_INVOICES_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_INVOICES_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_INVOICES_F"], "unique_id": "model.dlh_xero.W_INVOICES_F", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_INVOICES_F.sql", "original_file_path": "models/master/W_INVOICES_F.sql", "name": "W_INVOICES_F", "alias": "W_INVOICES_F", "checksum": {"name": "sha256", "checksum": "f8c06eb4121161882f1a3bd25f80a27efd741a1e3bdb704a2f06ca6fb64bd1d9"}, "tags": ["staging", "daily"], "refs": [["V_INVOICES_STG"]], "sources": [], "description": "This is the invoices fact table", "columns": {"K_INVOICE_LINE_DLHK": {"name": "K_INVOICE_LINE_DLHK", "description": "DataLakeHouse key of the invoices fact", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ITEM_DLHK": {"name": "K_ITEM_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CONTACT_DLHK": {"name": "K_CONTACT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_INVOICES_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_INVOICES_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_INVOICES_F"}, "model.dlh_xero.W_PURCHASE_ORDERS_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_PURCHASE_ORDERS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_PURCHASE_ORDERS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_PURCHASE_ORDERS_F"], "unique_id": "model.dlh_xero.W_PURCHASE_ORDERS_F", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_PURCHASE_ORDERS_F.sql", "original_file_path": "models/master/W_PURCHASE_ORDERS_F.sql", "name": "W_PURCHASE_ORDERS_F", "alias": "W_PURCHASE_ORDERS_F", "checksum": {"name": "sha256", "checksum": "dc545796f0f1963299496020f11c8ae03cacb09df859a8d524d1d74d9d1ae6ca"}, "tags": ["staging", "daily"], "refs": [["V_PURCHASE_ORDERS_STG"]], "sources": [], "description": "This is the purchase orders fact table", "columns": {"K_PURCHASE_LINE_ITEM_DLHK": {"name": "K_PURCHASE_LINE_ITEM_DLHK", "description": "DataLakeHouse key of the purchase order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ITEM_DLHK": {"name": "K_ITEM_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CONTACT_DLHK": {"name": "K_CONTACT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_PURCHASE_ORDERS_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_PURCHASE_ORDERS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_PURCHASE_ORDERS_F"}, "model.dlh_xero.W_RECEIPTS_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_RECEIPTS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_RECEIPTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_RECEIPTS_F"], "unique_id": "model.dlh_xero.W_RECEIPTS_F", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_RECEIPTS_F.sql", "original_file_path": "models/master/W_RECEIPTS_F.sql", "name": "W_RECEIPTS_F", "alias": "W_RECEIPTS_F", "checksum": {"name": "sha256", "checksum": "7cc81f599972e72fe802366a399c1231e517cd3f6ba663b6ac6445ac08a6041e"}, "tags": ["staging", "daily"], "refs": [["V_RECEIPTS_STG"]], "sources": [], "description": "This is the receipts fact table", "columns": {"K_RECEIPT_LINE_DLHK": {"name": "K_RECEIPT_LINE_DLHK", "description": "DataLakeHouse key of the receipt", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ITEM_DLHK": {"name": "K_ITEM_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_CONTACT_DLHK": {"name": "K_CONTACT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_RECEIPTS_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_RECEIPTS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_RECEIPTS_F"}, "model.dlh_xero.W_PAYMENTS_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_PAYMENTS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_PAYMENTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_PAYMENTS_F"], "unique_id": "model.dlh_xero.W_PAYMENTS_F", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_PAYMENTS_F.sql", "original_file_path": "models/master/W_PAYMENTS_F.sql", "name": "W_PAYMENTS_F", "alias": "W_PAYMENTS_F", "checksum": {"name": "sha256", "checksum": "c78c592b4ad95832ccd0cfef9c29d47a6f994ae5f10cdbb39b85fed9cf734f6e"}, "tags": ["staging", "daily"], "refs": [["V_PAYMENTS_STG"]], "sources": [], "description": "This is the payments fact table", "columns": {"K_PAYMENT_DLHK": {"name": "K_PAYMENT_DLHK", "description": "DataLakeHouse key of the payment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_PAYMENTS_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_PAYMENTS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_PAYMENTS_F"}, "model.dlh_xero.W_JOURNAL_F": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_JOURNAL_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_JOURNAL_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_JOURNAL_F"], "unique_id": "model.dlh_xero.W_JOURNAL_F", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_JOURNAL_F.sql", "original_file_path": "models/master/W_JOURNAL_F.sql", "name": "W_JOURNAL_F", "alias": "W_JOURNAL_F", "checksum": {"name": "sha256", "checksum": "f1ff0e8e0df10f858b9dae11dcef2f5e64b24a57c0c4a83157e656c7e1d02261"}, "tags": ["staging", "daily"], "refs": [["V_JOURNAL_STG"]], "sources": [], "description": "This is the journal fact table", "columns": {"K_JOURNAL_LINE_DLHK": {"name": "K_JOURNAL_LINE_DLHK", "description": "DataLakeHouse key of the journal", "meta": {}, "data_type": null, "quote": null, "tags": []}, "K_ACCOUNT_DLHK": {"name": "K_ACCOUNT_DLHK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_JOURNAL_F.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_JOURNAL_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_JOURNAL_F"}, "model.dlh_xero.W_CONTACTS_D": {"raw_sql": "{{ config (\n  materialized= 'table',\n  schema= var('target_schema'),\n  tags= [\"staging\", \"daily\"],\n  transient=false\n)\n}}\n\n\nSELECT\n  *\nFROM\n  {{ref('V_XER_CONTACTS_STG')}} AS C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dlh_xero.V_CONTACTS_STG"]}, "config": {"enabled": true, "alias": null, "schema": "XERO", "database": null, "tags": ["staging", "daily"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "dlh_xero": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_XERO", "fqn": ["dlh_xero", "master", "W_CONTACTS_D"], "unique_id": "model.dlh_xero.W_CONTACTS_D", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "master/W_CONTACTS_D.sql", "original_file_path": "models/master/W_CONTACTS_D.sql", "name": "W_CONTACTS_D", "alias": "W_CONTACTS_D", "checksum": {"name": "sha256", "checksum": "82235c1dd39f37bba1bd422ae783965545649346a75e545fe521b972322c0c9e"}, "tags": ["staging", "daily"], "refs": [["V_CONTACTS_STG"]], "sources": [], "description": "This is the contacts dimension table", "columns": {"K_CONTACT_DLHK": {"name": "K_CONTACT_DLHK", "description": "DataLakeHouse key of the contact", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dlh_xero://models/schema.yml", "compiled_path": "target/compiled/dlh_xero/models/master/W_CONTACTS_D.sql", "build_path": null, "deferred": false, "unrendered_config": {"dlh_xero": null, "materialized": "table", "schema": "XERO", "tags": ["staging", "daily"], "transient": false}, "created_at": 1647989373, "compiled_sql": "\n\n\nSELECT\n  *\nFROM\n  DEVELOPER_SANDBOX.DBT_XERO.V_CONTACTS_STG AS C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D"}, "test.dlh_xero.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_ACCOUNTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK"], "unique_id": "test.dlh_xero.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "alias": "unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_ACCOUNT_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\nwhere K_ACCOUNT_DLHK is not null\ngroup by K_ACCOUNT_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_xero.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_ACCOUNTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ACCOUNTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK"], "unique_id": "test.dlh_xero.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "alias": "not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\nwhere K_ACCOUNT_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_xero.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_ASSET_DLHK", "model": "{{ get_where_subquery(ref('W_ASSETS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ASSETS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_ASSETS_D_K_ASSET_DLHK"], "unique_id": "test.dlh_xero.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_ASSETS_D_K_ASSET_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_ASSETS_D_K_ASSET_DLHK", "alias": "unique_W_ASSETS_D_K_ASSET_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ASSETS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_ASSETS_D_K_ASSET_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_ASSET_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_ASSETS_D\nwhere K_ASSET_DLHK is not null\ngroup by K_ASSET_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ASSET_DLHK"}, "test.dlh_xero.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_ASSET_DLHK", "model": "{{ get_where_subquery(ref('W_ASSETS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ASSETS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_ASSETS_D_K_ASSET_DLHK"], "unique_id": "test.dlh_xero.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_ASSETS_D_K_ASSET_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_ASSETS_D_K_ASSET_DLHK", "alias": "not_null_W_ASSETS_D_K_ASSET_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ASSETS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_ASSETS_D_K_ASSET_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_ASSETS_D\nwhere K_ASSET_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ASSET_DLHK"}, "test.dlh_xero.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_CONTACTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_CONTACTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_CONTACTS_D_K_CONTACT_DLHK"], "unique_id": "test.dlh_xero.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_CONTACTS_D_K_CONTACT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_CONTACTS_D_K_CONTACT_DLHK", "alias": "unique_W_CONTACTS_D_K_CONTACT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_CONTACTS_D_K_CONTACT_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_CONTACT_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D\nwhere K_CONTACT_DLHK is not null\ngroup by K_CONTACT_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTACT_DLHK"}, "test.dlh_xero.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_CONTACTS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_CONTACTS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_CONTACTS_D_K_CONTACT_DLHK"], "unique_id": "test.dlh_xero.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_CONTACTS_D_K_CONTACT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_CONTACTS_D_K_CONTACT_DLHK", "alias": "not_null_W_CONTACTS_D_K_CONTACT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_CONTACTS_D_K_CONTACT_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D\nwhere K_CONTACT_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTACT_DLHK"}, "test.dlh_xero.unique_W_DATE_D_K_DATE_BK.219d060708": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_DATE_BK", "model": "{{ get_where_subquery(ref('W_DATE_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_DATE_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_DATE_D_K_DATE_BK"], "unique_id": "test.dlh_xero.unique_W_DATE_D_K_DATE_BK.219d060708", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_DATE_D_K_DATE_BK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_DATE_D_K_DATE_BK", "alias": "unique_W_DATE_D_K_DATE_BK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_DATE_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_DATE_D_K_DATE_BK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_DATE_BK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_DATE_D\nwhere K_DATE_BK is not null\ngroup by K_DATE_BK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_DATE_BK"}, "test.dlh_xero.not_null_W_DATE_D_K_DATE_BK.9697480ae2": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_DATE_BK", "model": "{{ get_where_subquery(ref('W_DATE_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_DATE_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_DATE_D_K_DATE_BK"], "unique_id": "test.dlh_xero.not_null_W_DATE_D_K_DATE_BK.9697480ae2", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_DATE_D_K_DATE_BK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_DATE_D_K_DATE_BK", "alias": "not_null_W_DATE_D_K_DATE_BK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_DATE_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_DATE_D_K_DATE_BK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_DATE_D\nwhere K_DATE_BK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_DATE_BK"}, "test.dlh_xero.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_EMPLOYEE_DLHK", "model": "{{ get_where_subquery(ref('W_EMPLOYEES_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_EMPLOYEES_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK"], "unique_id": "test.dlh_xero.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK", "alias": "unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_EMPLOYEES_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_EMPLOYEE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_EMPLOYEES_D\nwhere K_EMPLOYEE_DLHK is not null\ngroup by K_EMPLOYEE_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_EMPLOYEE_DLHK"}, "test.dlh_xero.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_EMPLOYEE_DLHK", "model": "{{ get_where_subquery(ref('W_EMPLOYEES_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_EMPLOYEES_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK"], "unique_id": "test.dlh_xero.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK", "alias": "not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_EMPLOYEES_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_EMPLOYEES_D\nwhere K_EMPLOYEE_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_EMPLOYEE_DLHK"}, "test.dlh_xero.unique_W_INVOICES_F_K_INVOICE_LINE_DLHK.70212c68bc": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_INVOICE_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_INVOICES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_INVOICES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_INVOICES_F_K_INVOICE_LINE_DLHK"], "unique_id": "test.dlh_xero.unique_W_INVOICES_F_K_INVOICE_LINE_DLHK.70212c68bc", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_INVOICES_F_K_INVOICE_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_INVOICES_F_K_INVOICE_LINE_DLHK", "alias": "unique_W_INVOICES_F_K_INVOICE_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_INVOICES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_INVOICES_F_K_INVOICE_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_INVOICE_LINE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_INVOICES_F\nwhere K_INVOICE_LINE_DLHK is not null\ngroup by K_INVOICE_LINE_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_INVOICE_LINE_DLHK"}, "test.dlh_xero.not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK.92bfd90dd3": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_INVOICE_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_INVOICES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_INVOICES_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK"], "unique_id": "test.dlh_xero.not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK.92bfd90dd3", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK", "alias": "not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_INVOICES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_INVOICES_F\nwhere K_INVOICE_LINE_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_INVOICE_LINE_DLHK"}, "test.dlh_xero.relationships_W_INVOICES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.094d441f8f": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_INVOICES_F_6df1406786d1553e6e5e553d6258d2b2\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_INVOICES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_INVOICES_F"]}, "config": {"enabled": true, "alias": "relationships_W_INVOICES_F_6df1406786d1553e6e5e553d6258d2b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_INVOICES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.dlh_xero.relationships_W_INVOICES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.094d441f8f", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_INVOICES_F_6df1406786d1553e6e5e553d6258d2b2.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_INVOICES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_INVOICES_F_6df1406786d1553e6e5e553d6258d2b2", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_INVOICES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_INVOICES_F_6df1406786d1553e6e5e553d6258d2b2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_INVOICES_F_6df1406786d1553e6e5e553d6258d2b2"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_INVOICES_F\n    where K_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_xero.relationships_W_INVOICES_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.9621bc84e4": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_INVOICES_F_6b9cb8480dee1d7ec9109c29737aa788\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ITEMS_D')", "field": "K_ITEM_DLHK", "column_name": "K_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_INVOICES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ITEMS_D", "model.dlh_xero.W_INVOICES_F"]}, "config": {"enabled": true, "alias": "relationships_W_INVOICES_F_6b9cb8480dee1d7ec9109c29737aa788", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_INVOICES_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_"], "unique_id": "test.dlh_xero.relationships_W_INVOICES_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.9621bc84e4", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_INVOICES_F_6b9cb8480dee1d7ec9109c29737aa788.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_INVOICES_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_", "alias": "relationships_W_INVOICES_F_6b9cb8480dee1d7ec9109c29737aa788", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ITEMS_D"], ["W_INVOICES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_INVOICES_F_6b9cb8480dee1d7ec9109c29737aa788.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_INVOICES_F_6b9cb8480dee1d7ec9109c29737aa788"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ITEM_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_INVOICES_F\n    where K_ITEM_DLHK is not null\n),\n\nparent as (\n    select K_ITEM_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_ITEMS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ITEM_DLHK"}, "test.dlh_xero.relationships_W_INVOICES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.25a8167053": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_INVOICES_F_a181b45e5baac6ca1019006c9867ca77\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CONTACTS_D')", "field": "K_CONTACT_DLHK", "column_name": "K_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_INVOICES_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.W_INVOICES_F"]}, "config": {"enabled": true, "alias": "relationships_W_INVOICES_F_a181b45e5baac6ca1019006c9867ca77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_INVOICES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_"], "unique_id": "test.dlh_xero.relationships_W_INVOICES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.25a8167053", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_INVOICES_F_a181b45e5baac6ca1019006c9867ca77.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_INVOICES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_", "alias": "relationships_W_INVOICES_F_a181b45e5baac6ca1019006c9867ca77", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"], ["W_INVOICES_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_INVOICES_F_a181b45e5baac6ca1019006c9867ca77.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_INVOICES_F_a181b45e5baac6ca1019006c9867ca77"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CONTACT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_INVOICES_F\n    where K_CONTACT_DLHK is not null\n),\n\nparent as (\n    select K_CONTACT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTACT_DLHK"}, "test.dlh_xero.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_ITEMS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_ITEMS_D_K_ITEM_DLHK"], "unique_id": "test.dlh_xero.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_ITEMS_D_K_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_ITEMS_D_K_ITEM_DLHK", "alias": "unique_W_ITEMS_D_K_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ITEMS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_ITEMS_D_K_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_ITEM_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_ITEMS_D\nwhere K_ITEM_DLHK is not null\ngroup by K_ITEM_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ITEM_DLHK"}, "test.dlh_xero.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_ITEMS_D')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ITEMS_D"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_ITEMS_D_K_ITEM_DLHK"], "unique_id": "test.dlh_xero.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_ITEMS_D_K_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_ITEMS_D_K_ITEM_DLHK", "alias": "not_null_W_ITEMS_D_K_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ITEMS_D"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_ITEMS_D_K_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_ITEMS_D\nwhere K_ITEM_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ITEM_DLHK"}, "test.dlh_xero.unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.de7771d119": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_JOURNAL_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_JOURNAL_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_JOURNAL_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK"], "unique_id": "test.dlh_xero.unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.de7771d119", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK", "alias": "unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_JOURNAL_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_JOURNAL_LINE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_JOURNAL_F\nwhere K_JOURNAL_LINE_DLHK is not null\ngroup by K_JOURNAL_LINE_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_JOURNAL_LINE_DLHK"}, "test.dlh_xero.not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.338b569e63": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_JOURNAL_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_JOURNAL_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_JOURNAL_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK"], "unique_id": "test.dlh_xero.not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.338b569e63", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK", "alias": "not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_JOURNAL_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_JOURNAL_F\nwhere K_JOURNAL_LINE_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_JOURNAL_LINE_DLHK"}, "test.dlh_xero.relationships_W_JOURNAL_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.a73d55ebc0": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_JOURNAL_F_627561ac7bc9233925e92b4b4643813f\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_JOURNAL_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_JOURNAL_F"]}, "config": {"enabled": true, "alias": "relationships_W_JOURNAL_F_627561ac7bc9233925e92b4b4643813f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_JOURNAL_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.dlh_xero.relationships_W_JOURNAL_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.a73d55ebc0", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_JOURNAL_F_627561ac7bc9233925e92b4b4643813f.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_JOURNAL_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_JOURNAL_F_627561ac7bc9233925e92b4b4643813f", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_JOURNAL_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_JOURNAL_F_627561ac7bc9233925e92b4b4643813f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_JOURNAL_F_627561ac7bc9233925e92b4b4643813f"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_JOURNAL_F\n    where K_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_xero.unique_W_PAYMENTS_F_K_PAYMENT_DLHK.7be7e13671": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_PAYMENT_DLHK", "model": "{{ get_where_subquery(ref('W_PAYMENTS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_PAYMENTS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_PAYMENTS_F_K_PAYMENT_DLHK"], "unique_id": "test.dlh_xero.unique_W_PAYMENTS_F_K_PAYMENT_DLHK.7be7e13671", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_PAYMENTS_F_K_PAYMENT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_PAYMENTS_F_K_PAYMENT_DLHK", "alias": "unique_W_PAYMENTS_F_K_PAYMENT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_PAYMENTS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_PAYMENTS_F_K_PAYMENT_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_PAYMENT_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_PAYMENTS_F\nwhere K_PAYMENT_DLHK is not null\ngroup by K_PAYMENT_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PAYMENT_DLHK"}, "test.dlh_xero.not_null_W_PAYMENTS_F_K_PAYMENT_DLHK.d991fc233c": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_PAYMENT_DLHK", "model": "{{ get_where_subquery(ref('W_PAYMENTS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_PAYMENTS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_PAYMENTS_F_K_PAYMENT_DLHK"], "unique_id": "test.dlh_xero.not_null_W_PAYMENTS_F_K_PAYMENT_DLHK.d991fc233c", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_PAYMENTS_F_K_PAYMENT_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_PAYMENTS_F_K_PAYMENT_DLHK", "alias": "not_null_W_PAYMENTS_F_K_PAYMENT_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_PAYMENTS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_PAYMENTS_F_K_PAYMENT_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_PAYMENTS_F\nwhere K_PAYMENT_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PAYMENT_DLHK"}, "test.dlh_xero.relationships_W_PAYMENTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.39ee0718ed": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_PAYMENTS_F_cf6dbb64f1825802afb6d07e15f278e4\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_PAYMENTS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_PAYMENTS_F"]}, "config": {"enabled": true, "alias": "relationships_W_PAYMENTS_F_cf6dbb64f1825802afb6d07e15f278e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_PAYMENTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.dlh_xero.relationships_W_PAYMENTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.39ee0718ed", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_PAYMENTS_F_cf6dbb64f1825802afb6d07e15f278e4.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_PAYMENTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_PAYMENTS_F_cf6dbb64f1825802afb6d07e15f278e4", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_PAYMENTS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_PAYMENTS_F_cf6dbb64f1825802afb6d07e15f278e4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_PAYMENTS_F_cf6dbb64f1825802afb6d07e15f278e4"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_PAYMENTS_F\n    where K_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_xero.unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.91bcf1557a": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_PURCHASE_LINE_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASE_ORDERS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_PURCHASE_ORDERS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK"], "unique_id": "test.dlh_xero.unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.91bcf1557a", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK", "alias": "unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_PURCHASE_ORDERS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_PURCHASE_LINE_ITEM_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_PURCHASE_ORDERS_F\nwhere K_PURCHASE_LINE_ITEM_DLHK is not null\ngroup by K_PURCHASE_LINE_ITEM_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PURCHASE_LINE_ITEM_DLHK"}, "test.dlh_xero.not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.575c8c840e": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_PURCHASE_LINE_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASE_ORDERS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_PURCHASE_ORDERS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK"], "unique_id": "test.dlh_xero.not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.575c8c840e", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK", "alias": "not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_PURCHASE_ORDERS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_PURCHASE_ORDERS_F\nwhere K_PURCHASE_LINE_ITEM_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_PURCHASE_LINE_ITEM_DLHK"}, "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.87b35440a5": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_PURCHASE_ORDER_4c10d2a8fd7e2e4eccac6b1360a886c3\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASE_ORDERS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_PURCHASE_ORDERS_F"]}, "config": {"enabled": true, "alias": "relationships_W_PURCHASE_ORDER_4c10d2a8fd7e2e4eccac6b1360a886c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_PURCHASE_ORDERS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.87b35440a5", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_PURCHASE_ORDER_4c10d2a8fd7e2e4eccac6b1360a886c3.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_PURCHASE_ORDERS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_PURCHASE_ORDER_4c10d2a8fd7e2e4eccac6b1360a886c3", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_PURCHASE_ORDERS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_PURCHASE_ORDER_4c10d2a8fd7e2e4eccac6b1360a886c3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_PURCHASE_ORDER_4c10d2a8fd7e2e4eccac6b1360a886c3"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_PURCHASE_ORDERS_F\n    where K_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.20e8492212": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_PURCHASE_ORDER_143fc3787e07ee8e3d05b1ac26e9a868\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ITEMS_D')", "field": "K_ITEM_DLHK", "column_name": "K_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASE_ORDERS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ITEMS_D", "model.dlh_xero.W_PURCHASE_ORDERS_F"]}, "config": {"enabled": true, "alias": "relationships_W_PURCHASE_ORDER_143fc3787e07ee8e3d05b1ac26e9a868", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_PURCHASE_ORDERS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_"], "unique_id": "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.20e8492212", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_PURCHASE_ORDER_143fc3787e07ee8e3d05b1ac26e9a868.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_PURCHASE_ORDERS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_", "alias": "relationships_W_PURCHASE_ORDER_143fc3787e07ee8e3d05b1ac26e9a868", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ITEMS_D"], ["W_PURCHASE_ORDERS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_PURCHASE_ORDER_143fc3787e07ee8e3d05b1ac26e9a868.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_PURCHASE_ORDER_143fc3787e07ee8e3d05b1ac26e9a868"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ITEM_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_PURCHASE_ORDERS_F\n    where K_ITEM_DLHK is not null\n),\n\nparent as (\n    select K_ITEM_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_ITEMS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ITEM_DLHK"}, "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.9dd00c521e": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_PURCHASE_ORDER_86a9d93eb988ce60ccfccc341e016b43\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CONTACTS_D')", "field": "K_CONTACT_DLHK", "column_name": "K_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_PURCHASE_ORDERS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.W_PURCHASE_ORDERS_F"]}, "config": {"enabled": true, "alias": "relationships_W_PURCHASE_ORDER_86a9d93eb988ce60ccfccc341e016b43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_PURCHASE_ORDERS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_"], "unique_id": "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.9dd00c521e", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_PURCHASE_ORDER_86a9d93eb988ce60ccfccc341e016b43.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_PURCHASE_ORDERS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_", "alias": "relationships_W_PURCHASE_ORDER_86a9d93eb988ce60ccfccc341e016b43", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"], ["W_PURCHASE_ORDERS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_PURCHASE_ORDER_86a9d93eb988ce60ccfccc341e016b43.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_PURCHASE_ORDER_86a9d93eb988ce60ccfccc341e016b43"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CONTACT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_PURCHASE_ORDERS_F\n    where K_CONTACT_DLHK is not null\n),\n\nparent as (\n    select K_CONTACT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTACT_DLHK"}, "test.dlh_xero.unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.c3844e40d6": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "K_RECEIPT_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_RECEIPTS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_RECEIPTS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK"], "unique_id": "test.dlh_xero.unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.c3844e40d6", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK", "alias": "unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_RECEIPTS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect\n    K_RECEIPT_LINE_DLHK as unique_field,\n    count(*) as n_records\n\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_RECEIPTS_F\nwhere K_RECEIPT_LINE_DLHK is not null\ngroup by K_RECEIPT_LINE_DLHK\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_RECEIPT_LINE_DLHK"}, "test.dlh_xero.not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.861cff8d91": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "K_RECEIPT_LINE_DLHK", "model": "{{ get_where_subquery(ref('W_RECEIPTS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_RECEIPTS_F"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK"], "unique_id": "test.dlh_xero.not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.861cff8d91", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.sql", "original_file_path": "models/schema.yml", "name": "not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK", "alias": "not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_RECEIPTS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nselect *\nfrom DEVELOPER_SANDBOX.DBT_XERO.W_RECEIPTS_F\nwhere K_RECEIPT_LINE_DLHK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_RECEIPT_LINE_DLHK"}, "test.dlh_xero.relationships_W_RECEIPTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.9ae97187e4": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_RECEIPTS_F_7257694d1dfd26ecdd173f6a28ea340d\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ACCOUNTS_D')", "field": "K_ACCOUNT_DLHK", "column_name": "K_ACCOUNT_DLHK", "model": "{{ get_where_subquery(ref('W_RECEIPTS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_RECEIPTS_F"]}, "config": {"enabled": true, "alias": "relationships_W_RECEIPTS_F_7257694d1dfd26ecdd173f6a28ea340d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_RECEIPTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_"], "unique_id": "test.dlh_xero.relationships_W_RECEIPTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.9ae97187e4", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_RECEIPTS_F_7257694d1dfd26ecdd173f6a28ea340d.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_RECEIPTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_", "alias": "relationships_W_RECEIPTS_F_7257694d1dfd26ecdd173f6a28ea340d", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ACCOUNTS_D"], ["W_RECEIPTS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_RECEIPTS_F_7257694d1dfd26ecdd173f6a28ea340d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_RECEIPTS_F_7257694d1dfd26ecdd173f6a28ea340d"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ACCOUNT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_RECEIPTS_F\n    where K_ACCOUNT_DLHK is not null\n),\n\nparent as (\n    select K_ACCOUNT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_ACCOUNTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ACCOUNT_DLHK"}, "test.dlh_xero.relationships_W_RECEIPTS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.b7c237baa8": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_RECEIPTS_F_26578ad44b7757424a9c3a00ab4edeb5\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_ITEMS_D')", "field": "K_ITEM_DLHK", "column_name": "K_ITEM_DLHK", "model": "{{ get_where_subquery(ref('W_RECEIPTS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_ITEMS_D", "model.dlh_xero.W_RECEIPTS_F"]}, "config": {"enabled": true, "alias": "relationships_W_RECEIPTS_F_26578ad44b7757424a9c3a00ab4edeb5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_RECEIPTS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_"], "unique_id": "test.dlh_xero.relationships_W_RECEIPTS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.b7c237baa8", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_RECEIPTS_F_26578ad44b7757424a9c3a00ab4edeb5.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_RECEIPTS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_", "alias": "relationships_W_RECEIPTS_F_26578ad44b7757424a9c3a00ab4edeb5", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_ITEMS_D"], ["W_RECEIPTS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_RECEIPTS_F_26578ad44b7757424a9c3a00ab4edeb5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_RECEIPTS_F_26578ad44b7757424a9c3a00ab4edeb5"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_ITEM_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_RECEIPTS_F\n    where K_ITEM_DLHK is not null\n),\n\nparent as (\n    select K_ITEM_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_ITEMS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_ITEM_DLHK"}, "test.dlh_xero.relationships_W_RECEIPTS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.b7c35dfdc9": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_W_RECEIPTS_F_08365a82f41ab33575a1413a8bec9356\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('W_CONTACTS_D')", "field": "K_CONTACT_DLHK", "column_name": "K_CONTACT_DLHK", "model": "{{ get_where_subquery(ref('W_RECEIPTS_F')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.W_RECEIPTS_F"]}, "config": {"enabled": true, "alias": "relationships_W_RECEIPTS_F_08365a82f41ab33575a1413a8bec9356", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "DEVELOPER_SANDBOX", "schema": "DBT_dbt_test__audit", "fqn": ["dlh_xero", "schema_test", "relationships_W_RECEIPTS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_"], "unique_id": "test.dlh_xero.relationships_W_RECEIPTS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.b7c35dfdc9", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "schema_test/relationships_W_RECEIPTS_F_08365a82f41ab33575a1413a8bec9356.sql", "original_file_path": "models/schema.yml", "name": "relationships_W_RECEIPTS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_", "alias": "relationships_W_RECEIPTS_F_08365a82f41ab33575a1413a8bec9356", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["W_CONTACTS_D"], ["W_RECEIPTS_F"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/dlh_xero/models/schema.yml/schema_test/relationships_W_RECEIPTS_F_08365a82f41ab33575a1413a8bec9356.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_W_RECEIPTS_F_08365a82f41ab33575a1413a8bec9356"}, "created_at": 1647989373, "compiled_sql": "\n    \n    \n\nwith child as (\n    select K_CONTACT_DLHK as from_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_RECEIPTS_F\n    where K_CONTACT_DLHK is not null\n),\n\nparent as (\n    select K_CONTACT_DLHK as to_field\n    from DEVELOPER_SANDBOX.DBT_XERO.W_CONTACTS_D\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "K_CONTACT_DLHK"}}, "sources": {"source.dlh_xero.DEMO_XERO.ACCOUNTS": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "ACCOUNTS"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.ACCOUNTS", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ACCOUNTS", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "ACCOUNTS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"ACCOUNTS\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.ALLOCATION": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "ALLOCATION"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.ALLOCATION", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ALLOCATION", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "ALLOCATION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"ALLOCATION\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.ASSET": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "ASSET"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.ASSET", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ASSET", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "ASSET", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"ASSET\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.ASSET_SETTINGS": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "ASSET_SETTINGS"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.ASSET_SETTINGS", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ASSET_SETTINGS", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "ASSET_SETTINGS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"ASSET_SETTINGS\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.ASSET_TYPE": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "ASSET_TYPE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.ASSET_TYPE", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ASSET_TYPE", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "ASSET_TYPE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"ASSET_TYPE\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.BRANDING_THEME": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "BRANDING_THEME"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.BRANDING_THEME", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "BRANDING_THEME", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "BRANDING_THEME", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"BRANDING_THEME\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.CONTACTS": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "CONTACTS"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.CONTACTS", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CONTACTS", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "CONTACTS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"CONTACTS\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.CONTACT_ADDRESS": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "CONTACT_ADDRESS"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.CONTACT_ADDRESS", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CONTACT_ADDRESS", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "CONTACT_ADDRESS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"CONTACT_ADDRESS\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.CONTACT_GROUP": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "CONTACT_GROUP"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.CONTACT_GROUP", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CONTACT_GROUP", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "CONTACT_GROUP", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"CONTACT_GROUP\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.CONTACT_GROUP_MEMBER": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "CONTACT_GROUP_MEMBER"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.CONTACT_GROUP_MEMBER", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "CONTACT_GROUP_MEMBER", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "CONTACT_GROUP_MEMBER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"CONTACT_GROUP_MEMBER\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.EMPLOYEE": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "EMPLOYEE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.EMPLOYEE", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "EMPLOYEE", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "EMPLOYEE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"EMPLOYEE\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.INVOICE": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "INVOICE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.INVOICE", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "INVOICE", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "INVOICE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"INVOICE\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "INVOICE_LINE_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "INVOICE_LINE_ITEM", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "INVOICE_LINE_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"INVOICE_LINE_ITEM\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM_TRACKING_CATEGORY": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "INVOICE_LINE_ITEM_TRACKING_CATEGORY"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM_TRACKING_CATEGORY", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "INVOICE_LINE_ITEM_TRACKING_CATEGORY", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "INVOICE_LINE_ITEM_TRACKING_CATEGORY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"INVOICE_LINE_ITEM_TRACKING_CATEGORY\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.ITEM": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.ITEM", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ITEM", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"ITEM\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.JOURNAL": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "JOURNAL"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.JOURNAL", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "JOURNAL", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "JOURNAL", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"JOURNAL\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.JOURNAL_LINE": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "JOURNAL_LINE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.JOURNAL_LINE", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "JOURNAL_LINE", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "JOURNAL_LINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"JOURNAL_LINE\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.JOURNAL_LINE_TRACKING_CATEGORY": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "JOURNAL_LINE_TRACKING_CATEGORY"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.JOURNAL_LINE_TRACKING_CATEGORY", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "JOURNAL_LINE_TRACKING_CATEGORY", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "JOURNAL_LINE_TRACKING_CATEGORY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"JOURNAL_LINE_TRACKING_CATEGORY\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.MANUAL_JOURNAL_LINE": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "MANUAL_JOURNAL_LINE"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.MANUAL_JOURNAL_LINE", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "MANUAL_JOURNAL_LINE", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "MANUAL_JOURNAL_LINE", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"MANUAL_JOURNAL_LINE\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.MANUAL_JOURNAL": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "MANUAL_JOURNAL"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.MANUAL_JOURNAL", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "MANUAL_JOURNAL", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "MANUAL_JOURNAL", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"MANUAL_JOURNAL\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.ORGANISATION": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "ORGANISATION"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.ORGANISATION", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "ORGANISATION", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "ORGANISATION", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"ORGANISATION\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.PAYMENT": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "PAYMENT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.PAYMENT", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PAYMENT", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "PAYMENT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"PAYMENT\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "PURCHASE_ORDER"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PURCHASE_ORDER", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "PURCHASE_ORDER", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"PURCHASE_ORDER\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER_LINE_ITEM": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "PURCHASE_ORDER_LINE_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER_LINE_ITEM", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "PURCHASE_ORDER_LINE_ITEM", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "PURCHASE_ORDER_LINE_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"PURCHASE_ORDER_LINE_ITEM\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.RECEIPT": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "RECEIPT"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.RECEIPT", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "RECEIPT", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "RECEIPT", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"RECEIPT\"", "created_at": 1647989373}, "source.dlh_xero.DEMO_XERO.RECEIPT_LINE_ITEM": {"fqn": ["dlh_xero", "sources", "DEMO_XERO", "RECEIPT_LINE_ITEM"], "database": "DEVELOPER_SANDBOX", "schema": "DEMO_XERO", "unique_id": "source.dlh_xero.DEMO_XERO.RECEIPT_LINE_ITEM", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "models/sources/sources.yml", "original_file_path": "models/sources/sources.yml", "name": "RECEIPT_LINE_ITEM", "source_name": "DEMO_XERO", "source_description": "", "loader": "", "identifier": "RECEIPT_LINE_ITEM", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": true, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DEVELOPER_SANDBOX.DEMO_XERO.\"RECEIPT_LINE_ITEM\"", "created_at": 1647989373}}, "macros": {"macro.dlh_xero.full_name": {"unique_id": "macro.dlh_xero.full_name", "package_name": "dlh_xero", "root_path": "/Users/guilhermealcantara/OneDrive/brf consulting/dbt/xero_dbt/dlh-xero-analytics-dbt", "path": "macros/common.sql", "original_file_path": "macros/common.sql", "name": "full_name", "macro_sql": "{% macro full_name(firstName,lastName) %}\r\n    (COALESCE({{firstName}},'') || COALESCE({{lastName}},''))\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1647989372}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/guilhermealcantara/Library/Python/3.8/lib/python/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.dlh_xero.V_JOURNAL_STG": ["model.dlh_xero.V_JOURNAL_HEADER_STG", "model.dlh_xero.V_JOURNAL_LINE_STG"], "model.dlh_xero.V_JOURNAL_HEADER_STG": ["source.dlh_xero.DEMO_XERO.JOURNAL"], "model.dlh_xero.V_JOURNAL_LINE_STG": ["model.dlh_xero.W_ACCOUNTS_D", "source.dlh_xero.DEMO_XERO.JOURNAL_LINE"], "model.dlh_xero.V_RECEIPTS_STG": ["model.dlh_xero.V_RECEIPT_HEADER_STG", "model.dlh_xero.V_RECEIPT_ITEM_STG"], "model.dlh_xero.V_RECEIPT_ITEM_STG": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.W_ITEMS_D", "source.dlh_xero.DEMO_XERO.RECEIPT_LINE_ITEM"], "model.dlh_xero.V_RECEIPT_HEADER_STG": ["model.dlh_xero.W_CONTACTS_D", "source.dlh_xero.DEMO_XERO.RECEIPT"], "model.dlh_xero.V_PAYMENTS_STG": ["model.dlh_xero.W_ACCOUNTS_D", "source.dlh_xero.DEMO_XERO.PAYMENT"], "model.dlh_xero.V_PURCHASE_ORDERS_STG": ["model.dlh_xero.V_PURCHASE_ORDER_HEADER_STG", "model.dlh_xero.V_PURCHASE_ORDER_LINE_STG"], "model.dlh_xero.V_PURCHASE_ORDER_HEADER_STG": ["model.dlh_xero.V_BRANDING_THEME_STG", "model.dlh_xero.W_CONTACTS_D", "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER"], "model.dlh_xero.V_PURCHASE_ORDER_LINE_STG": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_ITEMS_D", "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER_LINE_ITEM"], "model.dlh_xero.V_CONTACTS_STG": ["model.dlh_xero.V_BRANDING_THEME_STG", "source.dlh_xero.DEMO_XERO.CONTACTS", "source.dlh_xero.DEMO_XERO.CONTACT_GROUP", "source.dlh_xero.DEMO_XERO.CONTACT_GROUP_MEMBER"], "model.dlh_xero.V_DATE_STG": [], "model.dlh_xero.V_ACCOUNTS_STG": ["source.dlh_xero.DEMO_XERO.ACCOUNTS"], "model.dlh_xero.V_ITEM_STG": ["model.dlh_xero.W_ACCOUNTS_D", "source.dlh_xero.DEMO_XERO.ITEM"], "model.dlh_xero.V_BRANDING_THEME_STG": ["source.dlh_xero.DEMO_XERO.BRANDING_THEME"], "model.dlh_xero.V_ASSETS_STG": ["source.dlh_xero.DEMO_XERO.ASSET", "source.dlh_xero.DEMO_XERO.ASSET_TYPE"], "model.dlh_xero.V_INVOICE_LINE_STG": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_ITEMS_D", "source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM"], "model.dlh_xero.V_INVOICE_HEADER_STG": ["model.dlh_xero.V_BRANDING_THEME_STG", "model.dlh_xero.W_CONTACTS_D", "source.dlh_xero.DEMO_XERO.INVOICE"], "model.dlh_xero.V_INVOICES_STG": ["model.dlh_xero.V_INVOICE_HEADER_STG", "model.dlh_xero.V_INVOICE_LINE_STG"], "model.dlh_xero.V_EMPLOYEES_STG": ["source.dlh_xero.DEMO_XERO.EMPLOYEE"], "model.dlh_xero.W_ITEMS_D": ["model.dlh_xero.V_ITEM_STG"], "model.dlh_xero.W_ACCOUNTS_D": ["model.dlh_xero.V_ACCOUNTS_STG"], "model.dlh_xero.W_DATE_D": ["model.dlh_xero.V_DATE_STG"], "model.dlh_xero.W_EMPLOYEES_D": ["model.dlh_xero.V_EMPLOYEES_STG"], "model.dlh_xero.W_ASSETS_D": ["model.dlh_xero.V_ASSETS_STG"], "model.dlh_xero.W_INVOICES_F": ["model.dlh_xero.V_INVOICES_STG"], "model.dlh_xero.W_PURCHASE_ORDERS_F": ["model.dlh_xero.V_PURCHASE_ORDERS_STG"], "model.dlh_xero.W_RECEIPTS_F": ["model.dlh_xero.V_RECEIPTS_STG"], "model.dlh_xero.W_PAYMENTS_F": ["model.dlh_xero.V_PAYMENTS_STG"], "model.dlh_xero.W_JOURNAL_F": ["model.dlh_xero.V_JOURNAL_STG"], "model.dlh_xero.W_CONTACTS_D": ["model.dlh_xero.V_CONTACTS_STG"], "test.dlh_xero.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78": ["model.dlh_xero.W_ACCOUNTS_D"], "test.dlh_xero.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908": ["model.dlh_xero.W_ACCOUNTS_D"], "test.dlh_xero.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96": ["model.dlh_xero.W_ASSETS_D"], "test.dlh_xero.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1": ["model.dlh_xero.W_ASSETS_D"], "test.dlh_xero.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b": ["model.dlh_xero.W_CONTACTS_D"], "test.dlh_xero.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5": ["model.dlh_xero.W_CONTACTS_D"], "test.dlh_xero.unique_W_DATE_D_K_DATE_BK.219d060708": ["model.dlh_xero.W_DATE_D"], "test.dlh_xero.not_null_W_DATE_D_K_DATE_BK.9697480ae2": ["model.dlh_xero.W_DATE_D"], "test.dlh_xero.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139": ["model.dlh_xero.W_EMPLOYEES_D"], "test.dlh_xero.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef": ["model.dlh_xero.W_EMPLOYEES_D"], "test.dlh_xero.unique_W_INVOICES_F_K_INVOICE_LINE_DLHK.70212c68bc": ["model.dlh_xero.W_INVOICES_F"], "test.dlh_xero.not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK.92bfd90dd3": ["model.dlh_xero.W_INVOICES_F"], "test.dlh_xero.relationships_W_INVOICES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.094d441f8f": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_INVOICES_F"], "test.dlh_xero.relationships_W_INVOICES_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.9621bc84e4": ["model.dlh_xero.W_INVOICES_F", "model.dlh_xero.W_ITEMS_D"], "test.dlh_xero.relationships_W_INVOICES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.25a8167053": ["model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.W_INVOICES_F"], "test.dlh_xero.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa": ["model.dlh_xero.W_ITEMS_D"], "test.dlh_xero.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c": ["model.dlh_xero.W_ITEMS_D"], "test.dlh_xero.unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.de7771d119": ["model.dlh_xero.W_JOURNAL_F"], "test.dlh_xero.not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.338b569e63": ["model.dlh_xero.W_JOURNAL_F"], "test.dlh_xero.relationships_W_JOURNAL_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.a73d55ebc0": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_JOURNAL_F"], "test.dlh_xero.unique_W_PAYMENTS_F_K_PAYMENT_DLHK.7be7e13671": ["model.dlh_xero.W_PAYMENTS_F"], "test.dlh_xero.not_null_W_PAYMENTS_F_K_PAYMENT_DLHK.d991fc233c": ["model.dlh_xero.W_PAYMENTS_F"], "test.dlh_xero.relationships_W_PAYMENTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.39ee0718ed": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_PAYMENTS_F"], "test.dlh_xero.unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.91bcf1557a": ["model.dlh_xero.W_PURCHASE_ORDERS_F"], "test.dlh_xero.not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.575c8c840e": ["model.dlh_xero.W_PURCHASE_ORDERS_F"], "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.87b35440a5": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_PURCHASE_ORDERS_F"], "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.20e8492212": ["model.dlh_xero.W_ITEMS_D", "model.dlh_xero.W_PURCHASE_ORDERS_F"], "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.9dd00c521e": ["model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.W_PURCHASE_ORDERS_F"], "test.dlh_xero.unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.c3844e40d6": ["model.dlh_xero.W_RECEIPTS_F"], "test.dlh_xero.not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.861cff8d91": ["model.dlh_xero.W_RECEIPTS_F"], "test.dlh_xero.relationships_W_RECEIPTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.9ae97187e4": ["model.dlh_xero.W_ACCOUNTS_D", "model.dlh_xero.W_RECEIPTS_F"], "test.dlh_xero.relationships_W_RECEIPTS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.b7c237baa8": ["model.dlh_xero.W_ITEMS_D", "model.dlh_xero.W_RECEIPTS_F"], "test.dlh_xero.relationships_W_RECEIPTS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.b7c35dfdc9": ["model.dlh_xero.W_CONTACTS_D", "model.dlh_xero.W_RECEIPTS_F"], "source.dlh_xero.DEMO_XERO.ACCOUNTS": [], "source.dlh_xero.DEMO_XERO.ALLOCATION": [], "source.dlh_xero.DEMO_XERO.ASSET": [], "source.dlh_xero.DEMO_XERO.ASSET_SETTINGS": [], "source.dlh_xero.DEMO_XERO.ASSET_TYPE": [], "source.dlh_xero.DEMO_XERO.BRANDING_THEME": [], "source.dlh_xero.DEMO_XERO.CONTACTS": [], "source.dlh_xero.DEMO_XERO.CONTACT_ADDRESS": [], "source.dlh_xero.DEMO_XERO.CONTACT_GROUP": [], "source.dlh_xero.DEMO_XERO.CONTACT_GROUP_MEMBER": [], "source.dlh_xero.DEMO_XERO.EMPLOYEE": [], "source.dlh_xero.DEMO_XERO.INVOICE": [], "source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM": [], "source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM_TRACKING_CATEGORY": [], "source.dlh_xero.DEMO_XERO.ITEM": [], "source.dlh_xero.DEMO_XERO.JOURNAL": [], "source.dlh_xero.DEMO_XERO.JOURNAL_LINE": [], "source.dlh_xero.DEMO_XERO.JOURNAL_LINE_TRACKING_CATEGORY": [], "source.dlh_xero.DEMO_XERO.MANUAL_JOURNAL_LINE": [], "source.dlh_xero.DEMO_XERO.MANUAL_JOURNAL": [], "source.dlh_xero.DEMO_XERO.ORGANISATION": [], "source.dlh_xero.DEMO_XERO.PAYMENT": [], "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER": [], "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER_LINE_ITEM": [], "source.dlh_xero.DEMO_XERO.RECEIPT": [], "source.dlh_xero.DEMO_XERO.RECEIPT_LINE_ITEM": []}, "child_map": {"model.dlh_xero.V_JOURNAL_STG": ["model.dlh_xero.W_JOURNAL_F"], "model.dlh_xero.V_JOURNAL_HEADER_STG": ["model.dlh_xero.V_JOURNAL_STG"], "model.dlh_xero.V_JOURNAL_LINE_STG": ["model.dlh_xero.V_JOURNAL_STG"], "model.dlh_xero.V_RECEIPTS_STG": ["model.dlh_xero.W_RECEIPTS_F"], "model.dlh_xero.V_RECEIPT_ITEM_STG": ["model.dlh_xero.V_RECEIPTS_STG"], "model.dlh_xero.V_RECEIPT_HEADER_STG": ["model.dlh_xero.V_RECEIPTS_STG"], "model.dlh_xero.V_PAYMENTS_STG": ["model.dlh_xero.W_PAYMENTS_F"], "model.dlh_xero.V_PURCHASE_ORDERS_STG": ["model.dlh_xero.W_PURCHASE_ORDERS_F"], "model.dlh_xero.V_PURCHASE_ORDER_HEADER_STG": ["model.dlh_xero.V_PURCHASE_ORDERS_STG"], "model.dlh_xero.V_PURCHASE_ORDER_LINE_STG": ["model.dlh_xero.V_PURCHASE_ORDERS_STG"], "model.dlh_xero.V_CONTACTS_STG": ["model.dlh_xero.W_CONTACTS_D"], "model.dlh_xero.V_DATE_STG": ["model.dlh_xero.W_DATE_D"], "model.dlh_xero.V_ACCOUNTS_STG": ["model.dlh_xero.W_ACCOUNTS_D"], "model.dlh_xero.V_ITEM_STG": ["model.dlh_xero.W_ITEMS_D"], "model.dlh_xero.V_BRANDING_THEME_STG": ["model.dlh_xero.V_CONTACTS_STG", "model.dlh_xero.V_INVOICE_HEADER_STG", "model.dlh_xero.V_PURCHASE_ORDER_HEADER_STG"], "model.dlh_xero.V_ASSETS_STG": ["model.dlh_xero.W_ASSETS_D"], "model.dlh_xero.V_INVOICE_LINE_STG": ["model.dlh_xero.V_INVOICES_STG"], "model.dlh_xero.V_INVOICE_HEADER_STG": ["model.dlh_xero.V_INVOICES_STG"], "model.dlh_xero.V_INVOICES_STG": ["model.dlh_xero.W_INVOICES_F"], "model.dlh_xero.V_EMPLOYEES_STG": ["model.dlh_xero.W_EMPLOYEES_D"], "model.dlh_xero.W_ITEMS_D": ["model.dlh_xero.V_INVOICE_LINE_STG", "model.dlh_xero.V_PURCHASE_ORDER_LINE_STG", "model.dlh_xero.V_RECEIPT_ITEM_STG", "test.dlh_xero.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c", "test.dlh_xero.relationships_W_INVOICES_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.9621bc84e4", "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.20e8492212", "test.dlh_xero.relationships_W_RECEIPTS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.b7c237baa8", "test.dlh_xero.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa"], "model.dlh_xero.W_ACCOUNTS_D": ["model.dlh_xero.V_INVOICE_LINE_STG", "model.dlh_xero.V_ITEM_STG", "model.dlh_xero.V_JOURNAL_LINE_STG", "model.dlh_xero.V_PAYMENTS_STG", "model.dlh_xero.V_PURCHASE_ORDER_LINE_STG", "model.dlh_xero.V_RECEIPT_ITEM_STG", "test.dlh_xero.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908", "test.dlh_xero.relationships_W_INVOICES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.094d441f8f", "test.dlh_xero.relationships_W_JOURNAL_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.a73d55ebc0", "test.dlh_xero.relationships_W_PAYMENTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.39ee0718ed", "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.87b35440a5", "test.dlh_xero.relationships_W_RECEIPTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.9ae97187e4", "test.dlh_xero.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78"], "model.dlh_xero.W_DATE_D": ["test.dlh_xero.not_null_W_DATE_D_K_DATE_BK.9697480ae2", "test.dlh_xero.unique_W_DATE_D_K_DATE_BK.219d060708"], "model.dlh_xero.W_EMPLOYEES_D": ["test.dlh_xero.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef", "test.dlh_xero.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139"], "model.dlh_xero.W_ASSETS_D": ["test.dlh_xero.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1", "test.dlh_xero.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96"], "model.dlh_xero.W_INVOICES_F": ["test.dlh_xero.not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK.92bfd90dd3", "test.dlh_xero.relationships_W_INVOICES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.094d441f8f", "test.dlh_xero.relationships_W_INVOICES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.25a8167053", "test.dlh_xero.relationships_W_INVOICES_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.9621bc84e4", "test.dlh_xero.unique_W_INVOICES_F_K_INVOICE_LINE_DLHK.70212c68bc"], "model.dlh_xero.W_PURCHASE_ORDERS_F": ["test.dlh_xero.not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.575c8c840e", "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.87b35440a5", "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.9dd00c521e", "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.20e8492212", "test.dlh_xero.unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.91bcf1557a"], "model.dlh_xero.W_RECEIPTS_F": ["test.dlh_xero.not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.861cff8d91", "test.dlh_xero.relationships_W_RECEIPTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.9ae97187e4", "test.dlh_xero.relationships_W_RECEIPTS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.b7c35dfdc9", "test.dlh_xero.relationships_W_RECEIPTS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.b7c237baa8", "test.dlh_xero.unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.c3844e40d6"], "model.dlh_xero.W_PAYMENTS_F": ["test.dlh_xero.not_null_W_PAYMENTS_F_K_PAYMENT_DLHK.d991fc233c", "test.dlh_xero.relationships_W_PAYMENTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.39ee0718ed", "test.dlh_xero.unique_W_PAYMENTS_F_K_PAYMENT_DLHK.7be7e13671"], "model.dlh_xero.W_JOURNAL_F": ["test.dlh_xero.not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.338b569e63", "test.dlh_xero.relationships_W_JOURNAL_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.a73d55ebc0", "test.dlh_xero.unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.de7771d119"], "model.dlh_xero.W_CONTACTS_D": ["model.dlh_xero.V_INVOICE_HEADER_STG", "model.dlh_xero.V_PURCHASE_ORDER_HEADER_STG", "model.dlh_xero.V_RECEIPT_HEADER_STG", "model.dlh_xero.V_RECEIPT_ITEM_STG", "test.dlh_xero.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5", "test.dlh_xero.relationships_W_INVOICES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.25a8167053", "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.9dd00c521e", "test.dlh_xero.relationships_W_RECEIPTS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.b7c35dfdc9", "test.dlh_xero.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b"], "test.dlh_xero.unique_W_ACCOUNTS_D_K_ACCOUNT_DLHK.cba900fa78": [], "test.dlh_xero.not_null_W_ACCOUNTS_D_K_ACCOUNT_DLHK.918e0fe908": [], "test.dlh_xero.unique_W_ASSETS_D_K_ASSET_DLHK.72b8530c96": [], "test.dlh_xero.not_null_W_ASSETS_D_K_ASSET_DLHK.e38f830ac1": [], "test.dlh_xero.unique_W_CONTACTS_D_K_CONTACT_DLHK.dd14970f0b": [], "test.dlh_xero.not_null_W_CONTACTS_D_K_CONTACT_DLHK.c04ab046c5": [], "test.dlh_xero.unique_W_DATE_D_K_DATE_BK.219d060708": [], "test.dlh_xero.not_null_W_DATE_D_K_DATE_BK.9697480ae2": [], "test.dlh_xero.unique_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.83d2f33139": [], "test.dlh_xero.not_null_W_EMPLOYEES_D_K_EMPLOYEE_DLHK.dc599328ef": [], "test.dlh_xero.unique_W_INVOICES_F_K_INVOICE_LINE_DLHK.70212c68bc": [], "test.dlh_xero.not_null_W_INVOICES_F_K_INVOICE_LINE_DLHK.92bfd90dd3": [], "test.dlh_xero.relationships_W_INVOICES_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.094d441f8f": [], "test.dlh_xero.relationships_W_INVOICES_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.9621bc84e4": [], "test.dlh_xero.relationships_W_INVOICES_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.25a8167053": [], "test.dlh_xero.unique_W_ITEMS_D_K_ITEM_DLHK.0d69e5b7fa": [], "test.dlh_xero.not_null_W_ITEMS_D_K_ITEM_DLHK.fe14e7111c": [], "test.dlh_xero.unique_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.de7771d119": [], "test.dlh_xero.not_null_W_JOURNAL_F_K_JOURNAL_LINE_DLHK.338b569e63": [], "test.dlh_xero.relationships_W_JOURNAL_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.a73d55ebc0": [], "test.dlh_xero.unique_W_PAYMENTS_F_K_PAYMENT_DLHK.7be7e13671": [], "test.dlh_xero.not_null_W_PAYMENTS_F_K_PAYMENT_DLHK.d991fc233c": [], "test.dlh_xero.relationships_W_PAYMENTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.39ee0718ed": [], "test.dlh_xero.unique_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.91bcf1557a": [], "test.dlh_xero.not_null_W_PURCHASE_ORDERS_F_K_PURCHASE_LINE_ITEM_DLHK.575c8c840e": [], "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.87b35440a5": [], "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.20e8492212": [], "test.dlh_xero.relationships_W_PURCHASE_ORDERS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.9dd00c521e": [], "test.dlh_xero.unique_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.c3844e40d6": [], "test.dlh_xero.not_null_W_RECEIPTS_F_K_RECEIPT_LINE_DLHK.861cff8d91": [], "test.dlh_xero.relationships_W_RECEIPTS_F_K_ACCOUNT_DLHK__K_ACCOUNT_DLHK__ref_W_ACCOUNTS_D_.9ae97187e4": [], "test.dlh_xero.relationships_W_RECEIPTS_F_K_ITEM_DLHK__K_ITEM_DLHK__ref_W_ITEMS_D_.b7c237baa8": [], "test.dlh_xero.relationships_W_RECEIPTS_F_K_CONTACT_DLHK__K_CONTACT_DLHK__ref_W_CONTACTS_D_.b7c35dfdc9": [], "source.dlh_xero.DEMO_XERO.ACCOUNTS": ["model.dlh_xero.V_ACCOUNTS_STG"], "source.dlh_xero.DEMO_XERO.ALLOCATION": [], "source.dlh_xero.DEMO_XERO.ASSET": ["model.dlh_xero.V_ASSETS_STG"], "source.dlh_xero.DEMO_XERO.ASSET_SETTINGS": [], "source.dlh_xero.DEMO_XERO.ASSET_TYPE": ["model.dlh_xero.V_ASSETS_STG"], "source.dlh_xero.DEMO_XERO.BRANDING_THEME": ["model.dlh_xero.V_BRANDING_THEME_STG"], "source.dlh_xero.DEMO_XERO.CONTACTS": ["model.dlh_xero.V_CONTACTS_STG"], "source.dlh_xero.DEMO_XERO.CONTACT_ADDRESS": [], "source.dlh_xero.DEMO_XERO.CONTACT_GROUP": ["model.dlh_xero.V_CONTACTS_STG"], "source.dlh_xero.DEMO_XERO.CONTACT_GROUP_MEMBER": ["model.dlh_xero.V_CONTACTS_STG"], "source.dlh_xero.DEMO_XERO.EMPLOYEE": ["model.dlh_xero.V_EMPLOYEES_STG"], "source.dlh_xero.DEMO_XERO.INVOICE": ["model.dlh_xero.V_INVOICE_HEADER_STG"], "source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM": ["model.dlh_xero.V_INVOICE_LINE_STG"], "source.dlh_xero.DEMO_XERO.INVOICE_LINE_ITEM_TRACKING_CATEGORY": [], "source.dlh_xero.DEMO_XERO.ITEM": ["model.dlh_xero.V_ITEM_STG"], "source.dlh_xero.DEMO_XERO.JOURNAL": ["model.dlh_xero.V_JOURNAL_HEADER_STG"], "source.dlh_xero.DEMO_XERO.JOURNAL_LINE": ["model.dlh_xero.V_JOURNAL_LINE_STG"], "source.dlh_xero.DEMO_XERO.JOURNAL_LINE_TRACKING_CATEGORY": [], "source.dlh_xero.DEMO_XERO.MANUAL_JOURNAL_LINE": [], "source.dlh_xero.DEMO_XERO.MANUAL_JOURNAL": [], "source.dlh_xero.DEMO_XERO.ORGANISATION": [], "source.dlh_xero.DEMO_XERO.PAYMENT": ["model.dlh_xero.V_PAYMENTS_STG"], "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER": ["model.dlh_xero.V_PURCHASE_ORDER_HEADER_STG"], "source.dlh_xero.DEMO_XERO.PURCHASE_ORDER_LINE_ITEM": ["model.dlh_xero.V_PURCHASE_ORDER_LINE_STG"], "source.dlh_xero.DEMO_XERO.RECEIPT": ["model.dlh_xero.V_RECEIPT_HEADER_STG"], "source.dlh_xero.DEMO_XERO.RECEIPT_LINE_ITEM": ["model.dlh_xero.V_RECEIPT_ITEM_STG"]}}